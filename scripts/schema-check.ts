#!/usr/bin/env tsx

/**
 * Schema Check Script
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–π –∏ –ø–æ—Å–ª–µ –Ω–∏—Ö.
 */

import { db } from '../src/db/drizzle';

async function checkSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await db.execute('SELECT 1 as connection_test');
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const tables = [
      'user',
      'workspace',
      'workspace_member',
      'project',
      'issue',
      'ai_team_member',
      'ai_analytics',
      'vasily_action',
      'bug_report',
      'code_review'
    ];

    for (const tableName of tables) {
      try {
        const result = await db.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
        const count = result.rows[0]?.count || 0;
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
        console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    try {
      const indexes = await db.execute(`
        SELECT schemaname, tablename, indexname, indexdef
        FROM pg_indexes
        WHERE schemaname = 'public'
        ORDER BY tablename, indexname
      `);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${indexes.rows.length} –∏–Ω–¥–µ–∫—Å–æ–≤`);
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...');
    try {
      const constraints = await db.execute(`
        SELECT conname, conrelid::regclass, pg_get_constraintdef(oid)
        FROM pg_constraint
        WHERE connamespace = 'public'::regnamespace
        ORDER BY conrelid::regclass::text, contype DESC;
      `);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${constraints.rows.length} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π`);
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Team Members
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Team Members...');
    try {
      const aiMembers = await db.execute('SELECT name, role, is_active FROM ai_team_member');
      console.log(`‚úÖ AI Team Members: ${aiMembers.rows.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

      const roles = aiMembers.rows.map(row => row.role);
      const expectedRoles = [
        'AI_CTO', 'AI_HR', 'AI_PM', 'AI_QA', 'AI_DEVOPS',
        'AI_DESIGNER', 'AI_ANALYST', 'AI_CODE_REVIEWER',
        'AI_SECURITY', 'AI_PERFORMANCE', 'AI_DOCUMENTATION',
        'AI_ANALYTICS', 'AI_MEETING_ASSISTANT', 'AI_BURNOUT_DETECTOR'
      ];

      const missingRoles = expectedRoles.filter(role => !roles.includes(role));
      if (missingRoles.length > 0) {
        console.log(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–æ–ª–∏: ${missingRoles.join(', ')}`);
      } else {
        console.log('‚úÖ –í—Å–µ AI —Ä–æ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å AI Team Members');
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkSchema().catch(error => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
