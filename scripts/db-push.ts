#!/usr/bin/env tsx

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { migrate } from 'drizzle-orm/postgres-js/migrator';
import { sql } from 'drizzle-orm';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectionString = process.env.DATABASE_URL!;
const client = postgres(connectionString, { max: 1 });
const db = drizzle(client);

async function pushDatabase() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    await client`SELECT 1`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...');
    await migrate(db, { migrationsFolder: './drizzle' });
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –ë–î...');
    const tables = await client`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `;
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.forEach((table: any) => {
      console.log(`  - ${table.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const requiredTables = ['user', 'workspace', 'project', 'issue', 'ai_analytics'];
    const existingTables = tables.map((t: any) => t.table_name);
    
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    for (const table of requiredTables) {
      if (existingTables.includes(table)) {
        console.log(`  ‚úÖ ${table} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`  ‚ùå ${table} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    console.log('üéâ –ü—É—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –ë–î:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É—à
pushDatabase();
