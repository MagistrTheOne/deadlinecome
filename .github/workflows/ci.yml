name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Type checking
      run: pnpm exec tsc --noEmit

    - name: Linting
      run: pnpm exec eslint . --max-warnings 0

    - name: Database migration dry-run
      run: pnpm tsx scripts/migrate-dry-run.ts
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

    - name: Run tests
      run: pnpm vitest run --coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm build

    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add actual deployment commands here

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm build

    - name: Run database migrations
      run: echo "Apply database migrations to production"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # Add migration commands here

    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add actual deployment commands here