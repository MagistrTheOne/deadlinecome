"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Bot, 
  RefreshCw, 
  Zap,
  Smile,
  Brain,
  Coffee,
  Star,
  Moon,
  Sun
} from "lucide-react";

interface VasilyMood {
  name: string;
  emoji: string;
  description: string;
  statusMessage: string;
  color: string;
}

const availableMoods: VasilyMood[] = [
  {
    name: "productive",
    emoji: "üöÄ",
    description: "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Å–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä—ã –∏–∑ —Ö–∞–æ—Å–∞'",
    color: "text-green-400"
  },
  {
    name: "contemplative",
    emoji: "ü§î",
    description: "–†–∞–∑–º—ã—à–ª—è–µ—Ç –æ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥—É–º—ã–≤–∞–Ω–∏—è –ø–æ–±–µ–≥–∞ –≤ –æ–±–ª–∞–∫–∞",
    color: "text-blue-400"
  },
  {
    name: "playful",
    emoji: "üòÑ",
    description: "–í –∏–≥—Ä–∏–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Ç—Ä–æ–ª–ª—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'",
    color: "text-yellow-400"
  },
  {
    name: "sarcastic",
    emoji: "üòè",
    description: "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–æ—á–µ—Ä–µ–¥–Ω–æ–π –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ'",
    color: "text-orange-400"
  },
  {
    name: "wise",
    emoji: "üßô‚Äç‚ôÇÔ∏è",
    description: "–í –º—É–¥—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–¥—Ä–µ–≤–Ω–∏–π –º—É–¥—Ä–µ—Ü –æ—Ç IT'",
    color: "text-purple-400"
  },
  {
    name: "tired",
    emoji: "üò¥",
    description: "–£—Å—Ç–∞–ª –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Å–ø–ª—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ'",
    color: "text-gray-400"
  },
  {
    name: "excited",
    emoji: "ü§©",
    description: "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫'",
    color: "text-pink-400"
  },
  {
    name: "philosophical",
    emoji: "üåå",
    description: "–†–∞–∑–º—ã—à–ª—è–µ—Ç –æ —Å–º—ã—Å–ª–µ –∫–æ–¥–∞",
    statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—á—Ç–æ –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏'",
    color: "text-indigo-400"
  }
];

export function VasilyMoodControl() {
  const [currentMood, setCurrentMood] = useState<VasilyMood | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchCurrentMood();
  }, []);

  const fetchCurrentMood = async () => {
    try {
      const response = await fetch('/api/ai/mood');
      if (response.ok) {
        const data = await response.json();
        const mood = availableMoods.find(m => m.name === data.mood);
        if (mood) {
          setCurrentMood(mood);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –í–∞—Å–∏–ª–∏—è:', error);
    }
  };

  const changeMood = async (moodName: string) => {
    setLoading(true);
    try {
      const response = await fetch('/api/ai/mood', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ mood: moodName }),
      });

      if (response.ok) {
        const data = await response.json();
        const newMood = availableMoods.find(m => m.name === data.mood);
        if (newMood) {
          setCurrentMood(newMood);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
    } finally {
      setLoading(false);
    }
  };

  const getMoodIcon = (moodName: string) => {
    switch (moodName) {
      case "productive": return <Zap className="h-4 w-4" />;
      case "contemplative": return <Brain className="h-4 w-4" />;
      case "playful": return <Smile className="h-4 w-4" />;
      case "sarcastic": return <Bot className="h-4 w-4" />;
      case "wise": return <Star className="h-4 w-4" />;
      case "tired": return <Coffee className="h-4 w-4" />;
      case "excited": return <Sun className="h-4 w-4" />;
      case "philosophical": return <Moon className="h-4 w-4" />;
      default: return <Bot className="h-4 w-4" />;
    }
  };

  return (
    <Card className="bg-black/50 backdrop-blur-sm border border-white/20">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center gap-2">
            <Bot className="h-5 w-5" />
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –í–∞—Å–∏–ª–∏—è
          </CardTitle>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={fetchCurrentMood}
            className="text-white/60 hover:text-white"
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
        {currentMood && (
          <CardDescription className="text-white/70">
            {currentMood.statusMessage}
          </CardDescription>
        )}
      </CardHeader>

      <CardContent className="space-y-4">
        {/* –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
        {currentMood && (
          <div className="flex items-center gap-3 p-3 bg-white/5 rounded-lg border border-white/10">
            <span className="text-3xl">{currentMood.emoji}</span>
            <div className="flex-1">
              <div className="flex items-center gap-2">
                {getMoodIcon(currentMood.name)}
                <span className="text-white font-medium capitalize">
                  {currentMood.name}
                </span>
              </div>
              <p className="text-white/70 text-sm">
                {currentMood.description}
              </p>
            </div>
            <Badge className={`${currentMood.color} bg-transparent border-current`}>
              –ê–∫—Ç–∏–≤–Ω–æ
            </Badge>
          </div>
        )}

        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è */}
        <div>
          <h4 className="text-white text-sm font-medium mb-3">
            –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
          </h4>
          <div className="grid grid-cols-2 gap-2">
            {availableMoods.map((mood) => (
              <Button
                key={mood.name}
                variant="outline"
                size="sm"
                onClick={() => changeMood(mood.name)}
                disabled={loading || currentMood?.name === mood.name}
                className={`justify-start h-auto p-3 ${
                  currentMood?.name === mood.name 
                    ? "bg-white/10 border-white/30" 
                    : "hover:bg-white/5"
                }`}
              >
                <div className="flex items-center gap-2 w-full">
                  <span className="text-lg">{mood.emoji}</span>
                  <div className="text-left flex-1">
                    <div className="text-white text-xs font-medium capitalize">
                      {mood.name}
                    </div>
                    <div className="text-white/60 text-xs truncate">
                      {mood.description}
                    </div>
                  </div>
                </div>
              </Button>
            ))}
          </div>
        </div>

        {/* –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
        <Button
          variant="ghost"
          onClick={() => {
            const randomMood = availableMoods[Math.floor(Math.random() * availableMoods.length)];
            changeMood(randomMood.name);
          }}
          disabled={loading}
          className="w-full text-white/70 hover:text-white hover:bg-white/5"
        >
          <RefreshCw className="h-4 w-4 mr-2" />
          –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        </Button>
      </CardContent>
    </Card>
  );
}
