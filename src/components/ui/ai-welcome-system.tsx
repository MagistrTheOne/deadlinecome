"use client";

import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Bot, 
  Sparkles, 
  MessageCircle, 
  Lightbulb, 
  TrendingUp,
  Calendar,
  Users,
  Zap,
  X
} from "lucide-react";

interface WelcomeMessage {
  id: string;
  type: "welcome" | "suggestion" | "tip" | "achievement";
  title: string;
  content: string;
  action?: {
    label: string;
    onClick: () => void;
  };
  emoji: string;
  priority: "low" | "medium" | "high";
}

interface AIWelcomeSystemProps {
  user?: {
    name: string;
    email: string;
  };
  onClose?: () => void;
}

export function AIWelcomeSystem({ user, onClose }: AIWelcomeSystemProps) {
  const [messages, setMessages] = useState<WelcomeMessage[]>([]);
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const generateWelcomeMessages = (): WelcomeMessage[] => {
      const baseMessages: WelcomeMessage[] = [
        {
          id: "welcome-1",
          type: "welcome",
          title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeadLine! üöÄ",
          content: `–ü—Ä–∏–≤–µ—Ç, ${user?.name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}! –Ø –í–∞—Å–∏–ª–∏–π, –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.`,
          emoji: "üëã",
          priority: "high"
        },
        {
          id: "suggestion-1",
          type: "suggestion",
          title: "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
          content: "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å DeadLine. –Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.",
          action: {
            label: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            onClick: () => window.location.href = "/projects"
          },
          emoji: "üìÅ",
          priority: "high"
        },
        {
          id: "tip-1",
          type: "tip",
          title: "–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç",
          content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ —Å –í–∞—Å–∏–ª–∏–µ–º: /joke –¥–ª—è —à—É—Ç–æ–∫, /mood –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, /help –¥–ª—è –ø–æ–º–æ—â–∏.",
          emoji: "üí°",
          priority: "medium"
        },
        {
          id: "suggestion-2",
          type: "suggestion",
          title: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
          content: "–†–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤–º–µ—Å—Ç–µ! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∫–æ–ª–ª–µ–≥ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
          action: {
            label: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
            onClick: () => window.location.href = "/team"
          },
          emoji: "üë•",
          priority: "medium"
        },
        {
          id: "tip-2",
          type: "tip",
          title: "AI-—Ñ—É–Ω–∫—Ü–∏–∏",
          content: "DeadLine –æ—Å–Ω–∞—â–µ–Ω —É–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤, —É–º–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
          emoji: "ü§ñ",
          priority: "low"
        }
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
      const hour = new Date().getHours();
      if (hour < 12) {
        baseMessages.push({
          id: "morning-1",
          type: "tip",
          title: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è",
          content: "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.",
          emoji: "üåÖ",
          priority: "medium"
        });
      } else if (hour < 18) {
        baseMessages.push({
          id: "afternoon-1",
          type: "tip",
          title: "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! ‚ö°",
          content: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å—ã. –í–∞—Å–∏–ª–∏–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.",
          emoji: "üìä",
          priority: "medium"
        });
      } else {
        baseMessages.push({
          id: "evening-1",
          type: "tip",
          title: "–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ üåô",
          content: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–Ω—è –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
          emoji: "üìù",
          priority: "low"
        });
      }

      return baseMessages;
    };

    const welcomeMessages = generateWelcomeMessages();
    setMessages(welcomeMessages);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      setCurrentMessageIndex(prev => {
        if (prev < welcomeMessages.length - 1) {
          return prev + 1;
        }
        return prev;
      });
    }, 5000);

    return () => clearInterval(interval);
  }, [user]);

  const currentMessage = messages[currentMessageIndex];

  const handleNext = () => {
    if (currentMessageIndex < messages.length - 1) {
      setCurrentMessageIndex(prev => prev + 1);
    } else {
      setIsVisible(false);
      onClose?.();
    }
  };

  const handleSkip = () => {
    setIsVisible(false);
    onClose?.();
  };

  if (!isVisible || !currentMessage) {
    return null;
  }

  const getMessageIcon = (type: string) => {
    switch (type) {
      case "welcome":
        return <Bot className="h-5 w-5 text-blue-400" />;
      case "suggestion":
        return <Lightbulb className="h-5 w-5 text-yellow-400" />;
      case "tip":
        return <Sparkles className="h-5 w-5 text-purple-400" />;
      case "achievement":
        return <TrendingUp className="h-5 w-5 text-green-400" />;
      default:
        return <MessageCircle className="h-5 w-5 text-white/60" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-500/20 text-red-400 border-red-500/30";
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30";
      case "low":
        return "bg-blue-500/20 text-blue-400 border-blue-500/30";
      default:
        return "bg-white/10 text-white/60 border-white/20";
    }
  };

  return (
    <div className="fixed top-4 right-4 z-50 max-w-sm">
      <Card className="bg-black/60 backdrop-blur-xl border border-white/20 shadow-2xl shadow-white/10 animate-in slide-in-from-right duration-500">
        <CardContent className="p-4">
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center gap-2">
              {getMessageIcon(currentMessage.type)}
              <Badge className={getPriorityColor(currentMessage.priority)}>
                {currentMessage.type === "welcome" ? "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" :
                 currentMessage.type === "suggestion" ? "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" :
                 currentMessage.type === "tip" ? "–°–æ–≤–µ—Ç" : "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"}
              </Badge>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleSkip}
              className="text-white/60 hover:text-white hover:bg-white/10 h-6 w-6 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          <div className="mb-4">
            <h3 className="text-white font-semibold mb-2 flex items-center gap-2">
              <span className="text-2xl">{currentMessage.emoji}</span>
              {currentMessage.title}
            </h3>
            <p className="text-white/70 text-sm leading-relaxed">
              {currentMessage.content}
            </p>
          </div>

          {currentMessage.action && (
            <div className="mb-4">
              <Button
                onClick={currentMessage.action.onClick}
                size="sm"
                className="w-full bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 text-white"
              >
                {currentMessage.action.label}
              </Button>
            </div>
          )}

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="flex gap-1">
                {messages.map((_, index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-full transition-colors ${
                      index === currentMessageIndex 
                        ? "bg-white" 
                        : index < currentMessageIndex 
                          ? "bg-white/60" 
                          : "bg-white/20"
                    }`}
                  />
                ))}
              </div>
              <span className="text-xs text-white/50">
                {currentMessageIndex + 1} –∏–∑ {messages.length}
              </span>
            </div>

            <div className="flex gap-2">
              {currentMessageIndex < messages.length - 1 ? (
                <Button
                  onClick={handleNext}
                  size="sm"
                  variant="ghost"
                  className="text-white/60 hover:text-white hover:bg-white/10"
                >
                  –î–∞–ª–µ–µ
                </Button>
              ) : (
                <Button
                  onClick={handleSkip}
                  size="sm"
                  className="bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 text-white"
                >
                  –ü–æ–Ω—è—Ç–Ω–æ
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
