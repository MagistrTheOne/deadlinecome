export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  points: number;
  category: 'coding' | 'teamwork' | 'innovation' | 'leadership' | 'learning';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
  requirements: {
    type: string;
    value: number;
    description: string;
  }[];
  unlockedAt?: Date;
}

export interface UserStats {
  userId: string;
  level: number;
  experience: number;
  totalPoints: number;
  achievements: Achievement[];
  streak: number;
  lastActivity: Date;
  rank: string;
  badges: string[];
}

export interface LeaderboardEntry {
  userId: string;
  username: string;
  avatar: string;
  level: number;
  points: number;
  rank: number;
  achievements: number;
  streak: number;
}

export interface Quest {
  id: string;
  title: string;
  description: string;
  type: 'daily' | 'weekly' | 'monthly' | 'special';
  difficulty: 'easy' | 'medium' | 'hard' | 'expert';
  rewards: {
    points: number;
    experience: number;
    items?: string[];
  };
  requirements: {
    type: string;
    value: number;
    current: number;
  }[];
  expiresAt?: Date;
  completed: boolean;
  progress: number;
}

export class GamificationSystem {
  private achievements: Achievement[] = [];
  private userStats: Map<string, UserStats> = new Map();
  private leaderboard: LeaderboardEntry[] = [];
  private quests: Quest[] = [];
  private events: any[] = [];

  constructor() {
    this.initializeAchievements();
    this.initializeQuests();
  }

  private initializeAchievements() {
    this.achievements = [
      {
        id: 'first-commit',
        title: '–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç',
        description: '–°–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ',
        icon: 'üéØ',
        points: 10,
        category: 'coding',
        rarity: 'common',
        requirements: [
          { type: 'commits', value: 1, description: '–°–¥–µ–ª–∞—Ç—å 1 –∫–æ–º–º–∏—Ç' }
        ]
      },
      {
        id: 'code-master',
        title: '–ú–∞—Å—Ç–µ—Ä –∫–æ–¥–∞',
        description: '–ù–∞–ø–∏—Å–∞–ª 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞',
        icon: 'üíª',
        points: 100,
        category: 'coding',
        rarity: 'rare',
        requirements: [
          { type: 'lines_of_code', value: 1000, description: '–ù–∞–ø–∏—Å–∞—Ç—å 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞' }
        ]
      },
      {
        id: 'team-player',
        title: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
        description: '–ü–æ–º–æ–≥ 10 –∫–æ–ª–ª–µ–≥–∞–º',
        icon: 'ü§ù',
        points: 50,
        category: 'teamwork',
        rarity: 'common',
        requirements: [
          { type: 'help_others', value: 10, description: '–ü–æ–º–æ—á—å 10 –∫–æ–ª–ª–µ–≥–∞–º' }
        ]
      },
      {
        id: 'innovator',
        title: '–ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä',
        description: '–ü—Ä–µ–¥–ª–æ–∂–∏–ª 5 –Ω–æ–≤—ã—Ö –∏–¥–µ–π',
        icon: 'üí°',
        points: 75,
        category: 'innovation',
        rarity: 'epic',
        requirements: [
          { type: 'ideas', value: 5, description: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å 5 –Ω–æ–≤—ã—Ö –∏–¥–µ–π' }
        ]
      },
      {
        id: 'mentor',
        title: '–ú–µ–Ω—Ç–æ—Ä',
        description: '–û–±—É—á–∏–ª 3 –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        icon: 'üéì',
        points: 150,
        category: 'leadership',
        rarity: 'legendary',
        requirements: [
          { type: 'mentored', value: 3, description: '–û–±—É—á–∏—Ç—å 3 –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' }
        ]
      }
    ];
  }

  private initializeQuests() {
    this.quests = [
      {
        id: 'daily-coding',
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
        description: '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è',
        type: 'daily',
        difficulty: 'easy',
        rewards: { points: 20, experience: 10 },
        requirements: [
          { type: 'commits', value: 3, current: 0, description: '–°–¥–µ–ª–∞—Ç—å 3 –∫–æ–º–º–∏—Ç–∞' }
        ],
        completed: false,
        progress: 0
      },
      {
        id: 'weekly-collaboration',
        title: '–ù–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
        description: '–ê–∫—Ç–∏–≤–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–æ–π',
        type: 'weekly',
        difficulty: 'medium',
        rewards: { points: 100, experience: 50 },
        requirements: [
          { type: 'code_reviews', value: 5, current: 0, description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ 5 –∫–æ–¥-—Ä–µ–≤—å—é' },
          { type: 'meetings', value: 3, current: 0, description: '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ 3 –≤—Å—Ç—Ä–µ—á–∞—Ö' }
        ],
        completed: false,
        progress: 0
      }
    ];
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats(userId: string): UserStats {
    if (!this.userStats.has(userId)) {
      this.userStats.set(userId, {
        userId,
        level: 1,
        experience: 0,
        totalPoints: 0,
        achievements: [],
        streak: 0,
        lastActivity: new Date(),
        rank: '–ù–æ–≤–∏—á–æ–∫',
        badges: []
      });
    }
    return this.userStats.get(userId)!;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addExperience(userId: string, experience: number, reason: string) {
    const stats = this.getUserStats(userId);
    stats.experience += experience;
    stats.totalPoints += experience;
    stats.lastActivity = new Date();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const newLevel = Math.floor(stats.experience / 100) + 1;
    if (newLevel > stats.level) {
      stats.level = newLevel;
      this.updateRank(stats);
      this.events.push({
        type: 'level_up',
        userId,
        newLevel,
        timestamp: new Date()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.checkAchievements(userId);
    
    console.log(`üéÆ ${userId} –ø–æ–ª—É—á–∏–ª ${experience} –æ–ø—ã—Ç–∞ –∑–∞: ${reason}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  private checkAchievements(userId: string) {
    const stats = this.getUserStats(userId);
    
    for (const achievement of this.achievements) {
      if (stats.achievements.some(a => a.id === achievement.id)) continue;
      
      let canUnlock = true;
      for (const req of achievement.requirements) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (Math.random() < 0.1) {
          canUnlock = false;
          break;
        }
      }
      
      if (canUnlock) {
        const unlockedAchievement = { ...achievement, unlockedAt: new Date() };
        stats.achievements.push(unlockedAchievement);
        stats.totalPoints += achievement.points;
        
        this.events.push({
          type: 'achievement_unlocked',
          userId,
          achievement: unlockedAchievement,
          timestamp: new Date()
        });
        
        console.log(`üèÜ ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}`);
      }
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω–≥
  private updateRank(stats: UserStats) {
    if (stats.level >= 50) stats.rank = '–õ–µ–≥–µ–Ω–¥–∞';
    else if (stats.level >= 30) stats.rank = '–ú–∞—Å—Ç–µ—Ä';
    else if (stats.level >= 20) stats.rank = '–≠–∫—Å–ø–µ—Ä—Ç';
    else if (stats.level >= 10) stats.rank = '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
    else if (stats.level >= 5) stats.rank = '–û–ø—ã—Ç–Ω—ã–π';
    else stats.rank = '–ù–æ–≤–∏—á–æ–∫';
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  getLeaderboard(limit: number = 10): LeaderboardEntry[] {
    const entries = Array.from(this.userStats.values())
      .map(stats => ({
        userId: stats.userId,
        username: `User ${stats.userId}`,
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${stats.userId}`,
        level: stats.level,
        points: stats.totalPoints,
        rank: 0,
        achievements: stats.achievements.length,
        streak: stats.streak
      }))
      .sort((a, b) => b.points - a.points)
      .slice(0, limit);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–Ω–≥–∏
    entries.forEach((entry, index) => {
      entry.rank = index + 1;
    });

    return entries;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç—ã
  getQuests(userId: string): Quest[] {
    return this.quests.map(quest => ({
      ...quest,
      progress: Math.floor(Math.random() * 100)
    }));
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
  updateQuestProgress(userId: string, questId: string, progress: number) {
    const quest = this.quests.find(q => q.id === questId);
    if (!quest) return;

    quest.progress = Math.min(100, progress);
    
    if (quest.progress >= 100 && !quest.completed) {
      quest.completed = true;
      this.addExperience(userId, quest.rewards.experience, `–ö–≤–µ—Å—Ç: ${quest.title}`);
      
      this.events.push({
        type: 'quest_completed',
        userId,
        quest,
        timestamp: new Date()
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
  getEvents(limit: number = 20) {
    return this.events
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
      .slice(0, limit);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getAchievements() {
    return this.achievements;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
  getGamificationStats() {
    const totalUsers = this.userStats.size;
    const totalAchievements = this.achievements.length;
    const totalQuests = this.quests.length;
    const recentEvents = this.getEvents(10);
    
    return {
      totalUsers,
      totalAchievements,
      totalQuests,
      recentEvents,
      topAchievements: this.achievements
        .sort((a, b) => b.points - a.points)
        .slice(0, 5),
      activeQuests: this.quests.filter(q => !q.completed).length
    };
  }
}

export const GamificationSystemInstance = new GamificationSystem();
