import { LoggerService } from '@/lib/logger';

interface SlackConfig {
  clientId: string;
  clientSecret: string;
  signingSecret: string;
  botToken?: string;
  appToken?: string;
}

interface SlackMessage {
  channel: string;
  text?: string;
  blocks?: any[];
  attachments?: any[];
  threadTs?: string;
  replyBroadcast?: boolean;
}

interface SlackUser {
  id: string;
  name: string;
  realName: string;
  email: string;
  avatar: string;
  isBot: boolean;
  isAdmin: boolean;
  isOwner: boolean;
}

interface SlackChannel {
  id: string;
  name: string;
  isPrivate: boolean;
  isArchived: boolean;
  members: string[];
  topic: string;
  purpose: string;
}

class SlackService {
  private config: SlackConfig;
  private baseUrl = 'https://slack.com/api';

  constructor() {
    this.config = {
      clientId: process.env.SLACK_CLIENT_ID || '',
      clientSecret: process.env.SLACK_CLIENT_SECRET || '',
      signingSecret: process.env.SLACK_SIGNING_SECRET || '',
      botToken: process.env.SLACK_BOT_TOKEN,
      appToken: process.env.SLACK_APP_TOKEN
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ access token
  async getAccessToken(code: string): Promise<string> {
    try {
      const response = await fetch(`${this.baseUrl}/oauth.v2.access`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams({
          client_id: this.config.clientId,
          client_secret: this.config.clientSecret,
          code
        })
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to get access token');
      }

      LoggerService.api.info('Slack access token obtained', { 
        team: data.team?.name,
        scope: data.scope 
      });
      return data.access_token;
    } catch (error: any) {
      LoggerService.error.error('Failed to get Slack access token', { error: error.message });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
  async getTeamInfo(accessToken: string): Promise<any> {
    try {
      const response = await fetch(`${this.baseUrl}/team.info`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to get team info');
      }

      LoggerService.api.info('Slack team info retrieved', { 
        teamName: data.team?.name,
        teamId: data.team?.id 
      });
      return data.team;
    } catch (error: any) {
      LoggerService.error.error('Failed to get Slack team info', { error: error.message });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsers(accessToken: string): Promise<SlackUser[]> {
    try {
      const response = await fetch(`${this.baseUrl}/users.list`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to get users');
      }

      const users = data.members.map((member: any) => ({
        id: member.id,
        name: member.name,
        realName: member.real_name,
        email: member.profile?.email || '',
        avatar: member.profile?.image_192 || '',
        isBot: member.is_bot,
        isAdmin: member.is_admin,
        isOwner: member.is_owner
      }));

      LoggerService.api.info('Slack users retrieved', { count: users.length });
      return users;
    } catch (error: any) {
      LoggerService.error.error('Failed to get Slack users', { error: error.message });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
  async getChannels(accessToken: string): Promise<SlackChannel[]> {
    try {
      const response = await fetch(`${this.baseUrl}/conversations.list?types=public_channel,private_channel`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to get channels');
      }

      const channels = data.channels.map((channel: any) => ({
        id: channel.id,
        name: channel.name,
        isPrivate: channel.is_private,
        isArchived: channel.is_archived,
        members: channel.members || [],
        topic: channel.topic?.value || '',
        purpose: channel.purpose?.value || ''
      }));

      LoggerService.api.info('Slack channels retrieved', { count: channels.length });
      return channels;
    } catch (error: any) {
      LoggerService.error.error('Failed to get Slack channels', { error: error.message });
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(message: SlackMessage, botToken?: string): Promise<boolean> {
    try {
      const token = botToken || this.config.botToken;
      if (!token) {
        throw new Error('Bot token required');
      }

      const response = await fetch(`${this.baseUrl}/chat.postMessage`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(message)
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to send message');
      }

      LoggerService.api.info('Slack message sent', {
        channel: message.channel,
        messageTs: data.ts
      });
      return true;
    } catch (error: any) {
      LoggerService.error.error('Failed to send Slack message', {
        error: error.message,
        channel: message.channel
      });
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ
  async notifyTaskAssigned(task: any, assignee: any, channel: string): Promise<boolean> {
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'üéØ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*–ó–∞–¥–∞—á–∞:*\n${task.title}`
          },
          {
            type: 'mrkdwn',
            text: `*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:*\n${assignee.name}`
          },
          {
            type: 'mrkdwn',
            text: `*–ü—Ä–æ–µ–∫—Ç:*\n${task.project?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
          },
          {
            type: 'mrkdwn',
            text: `*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:*\n${task.priority || 'MEDIUM'}`
          }
        ]
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*–û–ø–∏—Å–∞–Ω–∏–µ:*\n${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
        }
      },
      {
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: '–û—Ç–∫—Ä—ã—Ç—å –≤ DeadLine'
            },
            url: `${process.env.NEXT_PUBLIC_APP_URL}/tasks/${task.id}`,
            style: 'primary'
          }
        ]
      }
    ];

    return await this.sendMessage({
      channel,
      blocks
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
  async notifyTaskCompleted(task: any, completedBy: any, channel: string): Promise<boolean> {
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: '‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*–ó–∞–¥–∞—á–∞:*\n${task.title}`
          },
          {
            type: 'mrkdwn',
            text: `*–ó–∞–≤–µ—Ä—à–∏–ª:*\n${completedBy.name}`
          },
          {
            type: 'mrkdwn',
            text: `*–ü—Ä–æ–µ–∫—Ç:*\n${task.project?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
          },
          {
            type: 'mrkdwn',
            text: `*–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*\n${new Date().toLocaleString('ru-RU')}`
          }
        ]
      },
      {
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç'
            },
            url: `${process.env.NEXT_PUBLIC_APP_URL}/projects/${task.projectId}`,
            style: 'primary'
          }
        ]
      }
    ];

    return await this.sendMessage({
      channel,
      blocks
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ
  async notifyDeadlineReminder(task: any, assignee: any, channel: string): Promise<boolean> {
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ'
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*–ó–∞–¥–∞—á–∞:*\n${task.title}`
          },
          {
            type: 'mrkdwn',
            text: `*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:*\n${assignee.name}`
          },
          {
            type: 'mrkdwn',
            text: `*–î–µ–¥–ª–∞–π–Ω:*\n${task.deadline ? new Date(task.deadline).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}`
          },
          {
            type: 'mrkdwn',
            text: `*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:*\n${task.priority || 'MEDIUM'}`
          }
        ]
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è'
          }
        ]
      },
      {
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É'
            },
            url: `${process.env.NEXT_PUBLIC_APP_URL}/tasks/${task.id}`,
            style: 'danger'
          }
        ]
      }
    ];

    return await this.sendMessage({
      channel,
      blocks
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –í–∞—Å–∏–ª–∏—è AI
  async notifyVasilyAction(action: any, channel: string): Promise<boolean> {
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –í–∞—Å–∏–ª–∏—è AI'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*${action.type}*\n${action.message}`
        }
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `–í–∞—Å–∏–ª–∏–π AI ‚Ä¢ ${new Date().toLocaleString('ru-RU')}`
          }
        ]
      },
      {
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –í–∞—Å–∏–ª–∏–µ–º'
            },
            url: `${process.env.NEXT_PUBLIC_APP_URL}/ai`,
            style: 'primary'
          }
        ]
      }
    ];

    return await this.sendMessage({
      channel,
      blocks
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendDailyReport(reportData: any, channel: string): Promise<boolean> {
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç DeadLine'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')}\n*–ö–æ–º–∞–Ω–¥–∞:* ${reportData.teamName || 'DeadLine'}`
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*–ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ:*\n${reportData.completedTasks || 0}`
          },
          {
            type: 'mrkdwn',
            text: `*–ó–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ:*\n${reportData.inProgressTasks || 0}`
          },
          {
            type: 'mrkdwn',
            text: `*–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á:*\n${reportData.newTasks || 0}`
          },
          {
            type: 'mrkdwn',
            text: `*–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:*\n${reportData.activeProjects || 0}`
          }
        ]
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:*\n${(reportData.topPerformers || []).map((performer: any, index: number) => 
            `${index + 1}. ${performer.name} - ${performer.completedTasks} –∑–∞–¥–∞—á`
          ).join('\n')}`
        }
      },
      {
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: '–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥'
            },
            url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
            style: 'primary'
          }
        ]
      }
    ];

    return await this.sendMessage({
      channel,
      blocks
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
  async createChannel(name: string, isPrivate: boolean = false, botToken?: string): Promise<string | null> {
    try {
      const token = botToken || this.config.botToken;
      if (!token) {
        throw new Error('Bot token required');
      }

      const response = await fetch(`${this.baseUrl}/conversations.create`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name,
          is_private: isPrivate
        })
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to create channel');
      }

      LoggerService.api.info('Slack channel created', {
        channelId: data.channel.id,
        channelName: data.channel.name
      });
      return data.channel.id;
    } catch (error: any) {
      LoggerService.error.error('Failed to create Slack channel', {
        error: error.message,
        channelName: name
      });
      return null;
    }
  }

  // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª
  async inviteToChannel(channelId: string, userIds: string[], botToken?: string): Promise<boolean> {
    try {
      const token = botToken || this.config.botToken;
      if (!token) {
        throw new Error('Bot token required');
      }

      const response = await fetch(`${this.baseUrl}/conversations.invite`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          channel: channelId,
          users: userIds.join(',')
        })
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error || 'Failed to invite users');
      }

      LoggerService.api.info('Users invited to Slack channel', {
        channelId,
        userIds
      });
      return true;
    } catch (error: any) {
      LoggerService.error.error('Failed to invite users to Slack channel', {
        error: error.message,
        channelId,
        userIds
      });
      return false;
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook
  validateWebhookSignature(payload: string, signature: string, timestamp: string): boolean {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é HMAC –ø–æ–¥–ø–∏—Å–∏ Slack
    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ slash –∫–æ–º–∞–Ω–¥
  async handleSlashCommand(command: string, text: string, userId: string, channelId: string): Promise<string> {
    try {
      switch (command) {
        case '/deadline':
          return await this.handleDeadlineCommand(text, userId, channelId);
        case '/task':
          return await this.handleTaskCommand(text, userId, channelId);
        case '/vasily':
          return await this.handleVasilyCommand(text, userId, channelId);
        default:
          return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /deadline, /task, /vasily';
      }
    } catch (error: any) {
      LoggerService.error.error('Failed to handle Slack slash command', {
        error: error.message,
        command,
        text,
        userId
      });
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /deadline
  private async handleDeadlineCommand(text: string, userId: string, channelId: string): Promise<string> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /deadline
    return '–ö–æ–º–∞–Ω–¥–∞ /deadline –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /task
  private async handleTaskCommand(text: string, userId: string, channelId: string): Promise<string> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /task
    return '–ö–æ–º–∞–Ω–¥–∞ /task –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /vasily
  private async handleVasilyCommand(text: string, userId: string, channelId: string): Promise<string> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /vasily
    return '–ö–æ–º–∞–Ω–¥–∞ /vasily –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
export const slackService = new SlackService();
