import { WebSocketServer, WebSocket } from 'ws';
import { NextRequest } from 'next/server';

interface WebSocketMessage {
  type: string;
  data: any;
  timestamp: number;
}

class WebSocketManager {
  private wss: WebSocketServer | null = null;
  private clients: Map<string, WebSocket> = new Map();
  private isRunning = false;

  constructor() {
    this.initializeServer();
  }

  private initializeServer() {
    if (typeof window !== 'undefined') return; // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    
    try {
      this.wss = new WebSocketServer({ 
        port: 8080,
        path: '/ws'
      });

      this.wss.on('connection', (ws: WebSocket, req) => {
        const clientId = this.generateClientId();
        this.clients.set(clientId, ws);
        
        console.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${clientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.sendToClient(clientId, {
          type: 'connection',
          data: { message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', clientId },
          timestamp: Date.now()
        });

        ws.on('message', (data) => {
          try {
            const message = JSON.parse(data.toString());
            this.handleMessage(clientId, message);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          }
        });

        ws.on('close', () => {
          console.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientId}`);
          this.clients.delete(clientId);
        });

        ws.on('error', (error) => {
          console.error(`WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error);
          this.clients.delete(clientId);
        });
      });

      this.wss.on('error', (error) => {
        console.error('WebSocket Server –æ—à–∏–±–∫–∞:', error);
      });

      this.isRunning = true;
      console.log('üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
  }

  private generateClientId(): string {
    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private handleMessage(clientId: string, message: WebSocketMessage) {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${clientId}:`, message);
    
    switch (message.type) {
      case 'ping':
        this.sendToClient(clientId, {
          type: 'pong',
          data: { timestamp: Date.now() },
          timestamp: Date.now()
        });
        break;
        
      case 'subscribe':
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.sendToClient(clientId, {
          type: 'subscribed',
          data: { channels: message.data.channels },
          timestamp: Date.now()
        });
        break;
        
      default:
        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
    }
  }

  private sendToClient(clientId: string, message: WebSocketMessage) {
    const client = this.clients.get(clientId);
    if (client && client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(message));
    }
  }

  public broadcast(message: WebSocketMessage) {
    this.clients.forEach((client, clientId) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(message));
      }
    });
  }

  public getStats() {
    return {
      isRunning: this.isRunning,
      connectedClients: this.clients.size,
      port: 8080
    };
  }

  public close() {
    if (this.wss) {
      this.wss.close();
      this.isRunning = false;
      console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let wsManager: WebSocketManager | null = null;

export function getWebSocketManager(): WebSocketManager {
  if (!wsManager) {
    wsManager = new WebSocketManager();
  }
  return wsManager;
}

export function getWebSocketStats() {
  if (!wsManager) {
    return {
      isRunning: false,
      connectedClients: 0,
      port: 8080,
      error: 'WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
    };
  }
  return wsManager.getStats();
}