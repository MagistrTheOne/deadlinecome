export interface ProjectPrediction {
  id: string;
  projectId: string;
  prediction: {
    successProbability: number;
    estimatedDuration: number;
    riskLevel: 'low' | 'medium' | 'high' | 'critical';
    budgetEstimate: number;
    teamSizeRecommendation: number;
    technologyStack: string[];
    potentialChallenges: string[];
    successFactors: string[];
    recommendations: string[];
  };
  confidence: number;
  timestamp: Date;
  basedOn: {
    similarProjects: number;
    historicalData: number;
    teamExperience: number;
  };
}

export interface ProjectMetrics {
  projectId: string;
  complexity: number;
  teamSize: number;
  budget: number;
  timeline: number;
  technologyStack: string[];
  teamExperience: number;
  clientRequirements: string[];
  marketConditions: number;
  competition: number;
}

export interface RiskAssessment {
  id: string;
  projectId: string;
  risks: {
    category: 'technical' | 'business' | 'team' | 'external';
    risk: string;
    probability: number;
    impact: number;
    mitigation: string;
    priority: 'low' | 'medium' | 'high' | 'critical';
  }[];
  overallRiskScore: number;
  recommendations: string[];
  timestamp: Date;
}

export interface MarketAnalysis {
  id: string;
  projectId: string;
  marketSize: number;
  growthRate: number;
  competition: {
    level: 'low' | 'medium' | 'high';
    competitors: string[];
    marketShare: number;
  };
  trends: string[];
  opportunities: string[];
  threats: string[];
  recommendations: string[];
  timestamp: Date;
}

export interface TechnologyTrend {
  name: string;
  popularity: number;
  growthRate: number;
  adoptionRate: number;
  futurePotential: number;
  category: 'frontend' | 'backend' | 'database' | 'cloud' | 'mobile' | 'ai';
  description: string;
}

export class AIProjectPredictor {
  private predictions: ProjectPrediction[] = [];
  private riskAssessments: RiskAssessment[] = [];
  private marketAnalyses: MarketAnalysis[] = [];
  private technologyTrends: TechnologyTrend[] = [];
  private historicalData: any[] = [];

  constructor() {
    this.initializeTechnologyTrends();
    this.initializeHistoricalData();
  }

  private initializeTechnologyTrends() {
    this.technologyTrends = [
      {
        name: 'React',
        popularity: 85,
        growthRate: 12,
        adoptionRate: 78,
        futurePotential: 90,
        category: 'frontend',
        description: '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤'
      },
      {
        name: 'Next.js',
        popularity: 75,
        growthRate: 25,
        adoptionRate: 65,
        futurePotential: 85,
        category: 'frontend',
        description: 'React —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞'
      },
      {
        name: 'Node.js',
        popularity: 80,
        growthRate: 8,
        adoptionRate: 70,
        futurePotential: 75,
        category: 'backend',
        description: 'JavaScript runtime –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
      },
      {
        name: 'TypeScript',
        popularity: 70,
        growthRate: 20,
        adoptionRate: 60,
        futurePotential: 85,
        category: 'frontend',
        description: '–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript'
      },
      {
        name: 'Python',
        popularity: 90,
        growthRate: 15,
        adoptionRate: 80,
        futurePotential: 95,
        category: 'backend',
        description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'
      },
      {
        name: 'PostgreSQL',
        popularity: 75,
        growthRate: 10,
        adoptionRate: 70,
        futurePotential: 80,
        category: 'database',
        description: '–ú–æ—â–Ω–∞—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
      },
      {
        name: 'AWS',
        popularity: 85,
        growthRate: 18,
        adoptionRate: 75,
        futurePotential: 90,
        category: 'cloud',
        description: '–û–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Amazon'
      },
      {
        name: 'Docker',
        popularity: 80,
        growthRate: 22,
        adoptionRate: 65,
        futurePotential: 85,
        category: 'cloud',
        description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'
      }
    ];
  }

  private initializeHistoricalData() {
    this.historicalData = [
      {
        projectId: 'proj_1',
        type: 'web-app',
        complexity: 7,
        teamSize: 5,
        budget: 50000,
        duration: 120,
        success: true,
        technologies: ['React', 'Node.js', 'PostgreSQL'],
        teamExperience: 8
      },
      {
        projectId: 'proj_2',
        type: 'mobile-app',
        complexity: 6,
        teamSize: 4,
        budget: 75000,
        duration: 90,
        success: true,
        technologies: ['React Native', 'Firebase'],
        teamExperience: 7
      },
      {
        projectId: 'proj_3',
        type: 'e-commerce',
        complexity: 9,
        teamSize: 8,
        budget: 150000,
        duration: 180,
        success: false,
        technologies: ['Vue.js', 'Laravel', 'MySQL'],
        teamExperience: 6
      }
    ];
  }

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –ø—Ä–æ–µ–∫—Ç–∞
  async predictProjectSuccess(metrics: ProjectMetrics): Promise<ProjectPrediction> {
    try {
      const similarProjects = this.findSimilarProjects(metrics);
      const riskLevel = this.calculateRiskLevel(metrics);
      const successProbability = this.calculateSuccessProbability(metrics, similarProjects);
      const estimatedDuration = this.estimateDuration(metrics, similarProjects);
      const budgetEstimate = this.estimateBudget(metrics, similarProjects);
      
      const prediction: ProjectPrediction = {
        id: `pred_${Date.now()}`,
        projectId: metrics.projectId,
        prediction: {
          successProbability,
          estimatedDuration,
          riskLevel,
          budgetEstimate,
          teamSizeRecommendation: this.recommendTeamSize(metrics),
          technologyStack: this.recommendTechnologies(metrics),
          potentialChallenges: this.identifyChallenges(metrics),
          successFactors: this.identifySuccessFactors(metrics),
          recommendations: this.generateRecommendations(metrics, riskLevel)
        },
        confidence: this.calculateConfidence(metrics, similarProjects),
        timestamp: new Date(),
        basedOn: {
          similarProjects: similarProjects.length,
          historicalData: this.historicalData.length,
          teamExperience: metrics.teamExperience
        }
      };

      this.predictions.push(prediction);
      console.log(`üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${metrics.projectId}: ${successProbability}% —É—Å–ø–µ—Ö–∞`);
      return prediction;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      throw error;
    }
  }

  private findSimilarProjects(metrics: ProjectMetrics): any[] {
    return this.historicalData.filter(project => {
      const complexityDiff = Math.abs(project.complexity - metrics.complexity);
      const teamSizeDiff = Math.abs(project.teamSize - metrics.teamSize);
      const experienceDiff = Math.abs(project.teamExperience - metrics.teamExperience);
      
      return complexityDiff <= 2 && teamSizeDiff <= 2 && experienceDiff <= 2;
    });
  }

  private calculateRiskLevel(metrics: ProjectMetrics): 'low' | 'medium' | 'high' | 'critical' {
    let riskScore = 0;
    
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    if (metrics.complexity >= 8) riskScore += 3;
    else if (metrics.complexity >= 6) riskScore += 2;
    else if (metrics.complexity >= 4) riskScore += 1;
    
    // –û–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã
    if (metrics.teamExperience < 5) riskScore += 3;
    else if (metrics.teamExperience < 7) riskScore += 2;
    else if (metrics.teamExperience < 9) riskScore += 1;
    
    // –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if (metrics.teamSize < 3) riskScore += 2;
    else if (metrics.teamSize > 10) riskScore += 2;
    
    // –ë—é–¥–∂–µ—Ç
    if (metrics.budget < 20000) riskScore += 2;
    else if (metrics.budget > 200000) riskScore += 1;
    
    if (riskScore >= 8) return 'critical';
    if (riskScore >= 6) return 'high';
    if (riskScore >= 4) return 'medium';
    return 'low';
  }

  private calculateSuccessProbability(metrics: ProjectMetrics, similarProjects: any[]): number {
    let baseProbability = 50;
    
    // –û–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã
    if (metrics.teamExperience >= 8) baseProbability += 20;
    else if (metrics.teamExperience >= 6) baseProbability += 10;
    else if (metrics.teamExperience < 4) baseProbability -= 20;
    
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    if (metrics.complexity <= 4) baseProbability += 15;
    else if (metrics.complexity >= 8) baseProbability -= 15;
    
    // –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if (metrics.teamSize >= 4 && metrics.teamSize <= 8) baseProbability += 10;
    else if (metrics.teamSize < 3) baseProbability -= 15;
    else if (metrics.teamSize > 10) baseProbability -= 10;
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if (similarProjects.length > 0) {
      const successRate = similarProjects.filter(p => p.success).length / similarProjects.length;
      baseProbability = (baseProbability + successRate * 100) / 2;
    }
    
    return Math.max(10, Math.min(95, Math.round(baseProbability)));
  }

  private estimateDuration(metrics: ProjectMetrics, similarProjects: any[]): number {
    let baseDuration = metrics.timeline;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (metrics.complexity >= 8) baseDuration *= 1.5;
    else if (metrics.complexity >= 6) baseDuration *= 1.2;
    else if (metrics.complexity <= 3) baseDuration *= 0.8;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if (metrics.teamExperience < 5) baseDuration *= 1.3;
    else if (metrics.teamExperience >= 8) baseDuration *= 0.9;
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if (similarProjects.length > 0) {
      const avgDuration = similarProjects.reduce((sum, p) => sum + p.duration, 0) / similarProjects.length;
      baseDuration = (baseDuration + avgDuration) / 2;
    }
    
    return Math.round(baseDuration);
  }

  private estimateBudget(metrics: ProjectMetrics, similarProjects: any[]): number {
    let baseBudget = metrics.budget;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (metrics.complexity >= 8) baseBudget *= 1.4;
    else if (metrics.complexity >= 6) baseBudget *= 1.1;
    else if (metrics.complexity <= 3) baseBudget *= 0.9;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    baseBudget *= (metrics.teamSize / 5); // –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ 5 —á–µ–ª–æ–≤–µ–∫
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if (similarProjects.length > 0) {
      const avgBudget = similarProjects.reduce((sum, p) => sum + p.budget, 0) / similarProjects.length;
      baseBudget = (baseBudget + avgBudget) / 2;
    }
    
    return Math.round(baseBudget);
  }

  private recommendTeamSize(metrics: ProjectMetrics): number {
    if (metrics.complexity <= 3) return 2;
    if (metrics.complexity <= 5) return 4;
    if (metrics.complexity <= 7) return 6;
    if (metrics.complexity <= 9) return 8;
    return 10;
  }

  private recommendTechnologies(metrics: ProjectMetrics): string[] {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (metrics.complexity <= 4) {
      recommendations.push('React', 'Node.js', 'PostgreSQL');
    } else if (metrics.complexity <= 7) {
      recommendations.push('Next.js', 'TypeScript', 'Prisma', 'PostgreSQL');
    } else {
      recommendations.push('Next.js', 'TypeScript', 'Prisma', 'PostgreSQL', 'Redis', 'Docker');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const popularTechs = this.technologyTrends
      .sort((a, b) => b.popularity - a.popularity)
      .slice(0, 3)
      .map(t => t.name);
    
    recommendations.push(...popularTechs);
    
    return [...new Set(recommendations)];
  }

  private identifyChallenges(metrics: ProjectMetrics): string[] {
    const challenges = [];
    
    if (metrics.complexity >= 8) {
      challenges.push('–í—ã—Å–æ–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å');
      challenges.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≥–ª—É–±–æ–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã');
    }
    
    if (metrics.teamExperience < 5) {
      challenges.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã');
      challenges.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è');
    }
    
    if (metrics.teamSize < 3) {
      challenges.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤');
    }
    
    if (metrics.budget < 30000) {
      challenges.push('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç');
    }
    
    if (metrics.technologyStack.length > 5) {
      challenges.push('–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π');
    }
    
    return challenges;
  }

  private identifySuccessFactors(metrics: ProjectMetrics): string[] {
    const factors = [];
    
    if (metrics.teamExperience >= 8) {
      factors.push('–í—ã—Å–æ–∫–∏–π –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (metrics.teamSize >= 4 && metrics.teamSize <= 8) {
      factors.push('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (metrics.complexity <= 6) {
      factors.push('–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞');
    }
    
    if (metrics.budget >= 50000) {
      factors.push('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }
    
    factors.push('–ß–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
    factors.push('–†–µ–≥—É–ª—è—Ä–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è');
    
    return factors;
  }

  private generateRecommendations(metrics: ProjectMetrics, riskLevel: string): string[] {
    const recommendations = [];
    
    if (riskLevel === 'critical' || riskLevel === 'high') {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —ç—Ç–∞–ø—ã');
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤');
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω');
    }
    
    if (metrics.teamExperience < 6) {
      recommendations.push('–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
      recommendations.push('–ù–∞–π–º–∏—Ç–µ –æ–ø—ã—Ç–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞');
    }
    
    if (metrics.complexity >= 7) {
      recommendations.push('–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (PoC)');
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
    }
    
    if (metrics.teamSize < 4) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
    
    recommendations.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞');
    recommendations.push('–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã');
    
    return recommendations;
  }

  private calculateConfidence(metrics: ProjectMetrics, similarProjects: any[]): number {
    let confidence = 50;
    
    // –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if (similarProjects.length >= 5) confidence += 20;
    else if (similarProjects.length >= 3) confidence += 10;
    
    // –û–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã –≤–ª–∏—è–µ—Ç –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if (metrics.teamExperience >= 8) confidence += 15;
    else if (metrics.teamExperience >= 6) confidence += 10;
    
    // –ß–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (metrics.clientRequirements.length >= 5) confidence += 10;
    
    return Math.min(95, confidence);
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
  async assessRisks(projectId: string, metrics: ProjectMetrics): Promise<RiskAssessment> {
    const risks = this.identifyRisks(metrics);
    const overallRiskScore = this.calculateOverallRiskScore(risks);
    
    const assessment: RiskAssessment = {
      id: `risk_${Date.now()}`,
      projectId,
      risks,
      overallRiskScore,
      recommendations: this.generateRiskMitigationRecommendations(risks),
      timestamp: new Date()
    };
    
    this.riskAssessments.push(assessment);
    return assessment;
  }

  private identifyRisks(metrics: ProjectMetrics): any[] {
    const risks = [];
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
    if (metrics.complexity >= 8) {
      risks.push({
        category: 'technical',
        risk: '–í—ã—Å–æ–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
        probability: 0.8,
        impact: 0.9,
        mitigation: '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞',
        priority: 'high'
      });
    }
    
    if (metrics.technologyStack.length > 5) {
      risks.push({
        category: 'technical',
        risk: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        probability: 0.7,
        impact: 0.8,
        mitigation: '–ü–æ—ç—Ç–∞–ø–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        priority: 'medium'
      });
    }
    
    // –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ä–∏—Å–∫–∏
    if (metrics.teamExperience < 5) {
      risks.push({
        category: 'team',
        risk: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã',
        probability: 0.9,
        impact: 0.8,
        mitigation: '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤',
        priority: 'high'
      });
    }
    
    if (metrics.teamSize < 3) {
      risks.push({
        category: 'team',
        risk: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤',
        probability: 0.8,
        impact: 0.7,
        mitigation: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥',
        priority: 'medium'
      });
    }
    
    // –ë–∏–∑–Ω–µ—Å —Ä–∏—Å–∫–∏
    if (metrics.budget < 30000) {
      risks.push({
        category: 'business',
        risk: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç',
        probability: 0.7,
        impact: 0.8,
        mitigation: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π',
        priority: 'high'
      });
    }
    
    // –í–Ω–µ—à–Ω–∏–µ —Ä–∏—Å–∫–∏
    if (metrics.marketConditions < 5) {
      risks.push({
        category: 'external',
        risk: '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
        probability: 0.6,
        impact: 0.7,
        mitigation: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥ —Ä—ã–Ω–æ–∫',
        priority: 'medium'
      });
    }
    
    return risks;
  }

  private calculateOverallRiskScore(risks: any[]): number {
    if (risks.length === 0) return 0;
    
    const weightedScore = risks.reduce((sum, risk) => {
      const weight = risk.priority === 'critical' ? 4 : 
                    risk.priority === 'high' ? 3 : 
                    risk.priority === 'medium' ? 2 : 1;
      return sum + (risk.probability * risk.impact * weight);
    }, 0);
    
    const maxPossibleScore = risks.length * 4; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
    return Math.round((weightedScore / maxPossibleScore) * 100);
  }

  private generateRiskMitigationRecommendations(risks: any[]): string[] {
    const recommendations = [];
    
    const highPriorityRisks = risks.filter(r => r.priority === 'high' || r.priority === 'critical');
    if (highPriorityRisks.length > 0) {
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏');
      recommendations.push('–ù–∞–∑–Ω–∞—á—å—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –∫–∞–∂–¥—ã–π —Ä–∏—Å–∫');
    }
    
    const technicalRisks = risks.filter(r => r.category === 'technical');
    if (technicalRisks.length > 0) {
      recommendations.push('–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω');
    }
    
    const teamRisks = risks.filter(r => r.category === 'team');
    if (teamRisks.length > 0) {
      recommendations.push('–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤');
    }
    
    return recommendations;
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
  async analyzeMarket(projectId: string, projectType: string): Promise<MarketAnalysis> {
    const marketSize = this.estimateMarketSize(projectType);
    const growthRate = this.estimateGrowthRate(projectType);
    const competition = this.analyzeCompetition(projectType);
    const trends = this.identifyMarketTrends(projectType);
    
    const analysis: MarketAnalysis = {
      id: `market_${Date.now()}`,
      projectId,
      marketSize,
      growthRate,
      competition,
      trends,
      opportunities: this.identifyOpportunities(projectType, trends),
      threats: this.identifyThreats(projectType, competition),
      recommendations: this.generateMarketRecommendations(projectType, marketSize, competition),
      timestamp: new Date()
    };
    
    this.marketAnalyses.push(analysis);
    return analysis;
  }

  private estimateMarketSize(projectType: string): number {
    const marketSizes = {
      'web-app': 50000000000,
      'mobile-app': 30000000000,
      'e-commerce': 40000000000,
      'saas': 60000000000,
      'ai-ml': 20000000000
    };
    
    return marketSizes[projectType as keyof typeof marketSizes] || 10000000000;
  }

  private estimateGrowthRate(projectType: string): number {
    const growthRates = {
      'web-app': 8,
      'mobile-app': 12,
      'e-commerce': 15,
      'saas': 20,
      'ai-ml': 25
    };
    
    return growthRates[projectType as keyof typeof growthRates] || 10;
  }

  private analyzeCompetition(projectType: string): any {
    const competitionLevels = {
      'web-app': { level: 'high', competitors: ['Google', 'Microsoft', 'Amazon'], marketShare: 70 },
      'mobile-app': { level: 'high', competitors: ['Apple', 'Google', 'Facebook'], marketShare: 80 },
      'e-commerce': { level: 'medium', competitors: ['Amazon', 'Shopify', 'WooCommerce'], marketShare: 60 },
      'saas': { level: 'medium', competitors: ['Salesforce', 'Microsoft', 'Oracle'], marketShare: 50 },
      'ai-ml': { level: 'low', competitors: ['OpenAI', 'Google', 'Microsoft'], marketShare: 30 }
    };
    
    return competitionLevels[projectType as keyof typeof competitionLevels] || { level: 'medium', competitors: [], marketShare: 50 };
  }

  private identifyMarketTrends(projectType: string): string[] {
    const trends = {
      'web-app': ['Progressive Web Apps', 'Serverless Architecture', 'Microservices'],
      'mobile-app': ['Cross-platform Development', 'AI Integration', 'IoT Connectivity'],
      'e-commerce': ['Personalization', 'Voice Commerce', 'Social Commerce'],
      'saas': ['No-code/Low-code', 'AI Automation', 'Vertical SaaS'],
      'ai-ml': ['Generative AI', 'Edge Computing', 'Federated Learning']
    };
    
    return trends[projectType as keyof typeof trends] || ['Digital Transformation', 'Cloud Migration'];
  }

  private identifyOpportunities(projectType: string, trends: string[]): string[] {
    const opportunities = [];
    
    trends.forEach(trend => {
      opportunities.push(`–†–∞–Ω–Ω–µ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: ${trend}`);
    });
    
    opportunities.push('–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞');
    opportunities.push('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    opportunities.push('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
    
    return opportunities;
  }

  private identifyThreats(projectType: string, competition: any): string[] {
    const threats = [];
    
    if (competition.level === 'high') {
      threats.push('–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ');
      threats.push('–°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏–∏');
    }
    
    threats.push('–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    threats.push('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏');
    threats.push('–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å');
    
    return threats;
  }

  private generateMarketRecommendations(projectType: string, marketSize: number, competition: any): string[] {
    const recommendations = [];
    
    if (competition.level === 'high') {
      recommendations.push('–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∏—à–µ–≤–æ–º —Ä—ã–Ω–∫–µ');
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    }
    
    if (marketSize > 50000000000) {
      recommendations.push('–†—ã–Ω–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é —ç–∫—Å–ø–∞–Ω—Å–∏—é');
    }
    
    recommendations.push('–ò–∑—É—á–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
    recommendations.push('–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–Ω–æ–∫');
    
    return recommendations;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
  getTechnologyTrends(): TechnologyTrend[] {
    return this.technologyTrends;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
  getPredictionStats() {
    const totalPredictions = this.predictions.length;
    const avgConfidence = this.predictions.length > 0 
      ? this.predictions.reduce((sum, p) => sum + p.confidence, 0) / this.predictions.length 
      : 0;
    
    const riskDistribution = this.riskAssessments.reduce((acc, assessment) => {
      const level = assessment.overallRiskScore >= 80 ? 'critical' :
                   assessment.overallRiskScore >= 60 ? 'high' :
                   assessment.overallRiskScore >= 40 ? 'medium' : 'low';
      acc[level] = (acc[level] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return {
      totalPredictions,
      avgConfidence: Math.round(avgConfidence),
      riskDistribution,
      recentPredictions: this.predictions.slice(-5),
      topTechnologies: this.technologyTrends
        .sort((a, b) => b.popularity - a.popularity)
        .slice(0, 5)
    };
  }
}

export const AIProjectPredictorInstance = new AIProjectPredictor();
