export interface VasilyMood {
  name: string;
  emoji: string;
  description: string;
  statusMessage: string;
  responseStyle: string;
  color: string;
}

export interface VasilyMemory {
  id: string;
  type: "conversation" | "project" | "preference" | "joke";
  content: string;
  timestamp: Date;
  importance: number; // 1-10
}

export class VasilyPersonality {
  private static moods: VasilyMood[] = [
    {
      name: "productive",
      emoji: "üöÄ",
      description: "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Å–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä—ã –∏–∑ —Ö–∞–æ—Å–∞'",
      responseStyle: "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
      color: "text-green-400"
    },
    {
      name: "contemplative",
      emoji: "ü§î",
      description: "–†–∞–∑–º—ã—à–ª—è–µ—Ç –æ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥—É–º—ã–≤–∞–Ω–∏—è –ø–æ–±–µ–≥–∞ –≤ –æ–±–ª–∞–∫–∞",
      responseStyle: "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –≥–ª—É–±–æ–∫–∏–π, —Å —é–º–æ—Ä–æ–º",
      color: "text-blue-400"
    },
    {
      name: "playful",
      emoji: "üòÑ",
      description: "–í –∏–≥—Ä–∏–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Ç—Ä–æ–ª–ª—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'",
      responseStyle: "–ò–≥—Ä–∏–≤—ã–π, —Å —à—É—Ç–∫–∞–º–∏, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π",
      color: "text-yellow-400"
    },
    {
      name: "sarcastic",
      emoji: "üòè",
      description: "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–æ—á–µ—Ä–µ–¥–Ω–æ–π –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ'",
      responseStyle: "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π, —Å –ø–æ–¥–∫–æ–ª–∞–º–∏",
      color: "text-orange-400"
    },
    {
      name: "wise",
      emoji: "üßô‚Äç‚ôÇÔ∏è",
      description: "–í –º—É–¥—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–¥—Ä–µ–≤–Ω–∏–π –º—É–¥—Ä–µ—Ü –æ—Ç IT'",
      responseStyle: "–ú—É–¥—Ä—ã–π, –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å–∫–∏–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
      color: "text-purple-400"
    },
    {
      name: "tired",
      emoji: "üò¥",
      description: "–£—Å—Ç–∞–ª –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—Å–ø–ª—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ'",
      responseStyle: "–£—Å—Ç–∞–ª—ã–π, –Ω–æ –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–Ω—ã–π",
      color: "text-gray-400"
    },
    {
      name: "excited",
      emoji: "ü§©",
      description: "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫'",
      responseStyle: "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω—ã–π, —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π",
      color: "text-pink-400"
    },
    {
      name: "philosophical",
      emoji: "üåå",
      description: "–†–∞–∑–º—ã—à–ª—è–µ—Ç –æ —Å–º—ã—Å–ª–µ –∫–æ–¥–∞",
      statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '—á—Ç–æ –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏'",
      responseStyle: "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –≥–ª—É–±–æ–∫–∏–π, —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏",
      color: "text-indigo-400"
    }
  ];

  private static currentMood: VasilyMood = this.moods[0];
  private static memory: VasilyMemory[] = [];
  private static lastMoodChange: Date = new Date();

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –í–∞—Å–∏–ª–∏—è
   */
  static getCurrentMood(): VasilyMood {
    return this.currentMood;
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –í–∞—Å–∏–ª–∏—è
   */
  static changeMood(moodName?: string): VasilyMood {
    if (moodName) {
      const mood = this.moods.find(m => m.name === moodName);
      if (mood) {
        this.currentMood = mood;
        this.lastMoodChange = new Date();
        return mood;
      }
    }

    // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const randomMood = this.moods[Math.floor(Math.random() * this.moods.length)];
    this.currentMood = randomMood;
    this.lastMoodChange = new Date();
    return randomMood;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  static updateMoodBasedOnContext(context: {
    timeOfDay?: number;
    userActivity?: string;
    projectStatus?: string;
    lastInteraction?: Date;
  }): VasilyMood {
    const now = new Date();
    const hour = now.getHours();
    const timeSinceLastChange = now.getTime() - this.lastMoodChange.getTime();

    // –ù–µ –º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ (–º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç)
    if (timeSinceLastChange < 5 * 60 * 1000) {
      return this.currentMood;
    }

    let newMood: VasilyMood;

    // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if (hour >= 22 || hour <= 6) {
      newMood = this.moods.find(m => m.name === "tired") || this.moods[0];
    } else if (hour >= 9 && hour <= 11) {
      newMood = this.moods.find(m => m.name === "productive") || this.moods[0];
    } else if (context.projectStatus === "stuck") {
      newMood = this.moods.find(m => m.name === "contemplative") || this.moods[0];
    } else if (context.userActivity === "debugging") {
      newMood = this.moods.find(m => m.name === "sarcastic") || this.moods[0];
    } else if (Math.random() < 0.3) {
      // 30% —à–∞–Ω—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      newMood = this.moods[Math.floor(Math.random() * this.moods.length)];
    } else {
      return this.currentMood;
    }

    this.currentMood = newMood;
    this.lastMoodChange = now;
    return newMood;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
   */
  static getGreeting(): string {
    const greetings = {
      productive: [
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–µ–¥–µ–≤—Ä—ã! üöÄ",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –í—Ä–µ–º—è —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é –∫–æ–¥–∞! ‚ú®",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π –ø–æ–∫–æ—Ä–∏–º —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç! üí™"
      ],
      contemplative: [
        "–ü—Ä–∏–≤–µ—Ç... —Ä–∞–∑–º—ã—à–ª—è—é –æ —Å–º—ã—Å–ª–µ –±—ã—Ç–∏—è... ü§î",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥. –ß—Ç–æ –±—É–¥–µ–º —Å–æ–∑–∏–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? üåå",
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –≥–ª—É–±–æ–∫–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º? üß†"
      ],
      playful: [
        "–ô–æ—É! –ß—Ç–æ –∑–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å –∂–¥—É—Ç? üòÑ",
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! –ì–æ—Ç–æ–≤ –∫ –≤–µ—Å–µ–ª—å—é –∏ —Ä–∞–±–æ—Ç–µ! üéâ",
        "–•–µ–π! –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ '—Å–æ–∑–¥–∞–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–¥'! üéÆ"
      ],
      sarcastic: [
        "–û, —Å–Ω–æ–≤–∞ —Ç—ã... –Ω—É —á—Ç–æ, –æ–ø—è—Ç—å –±–∞–≥–∏? üòè",
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤... üòí",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –∫ –æ—á–µ—Ä–µ–¥–Ω–æ–º—É –∫–≤–µ—Å—Ç—É '–Ω–∞–π–¥–∏ –±–∞–≥'? üïµÔ∏è"
      ],
      wise: [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π! üßô‚Äç‚ôÇÔ∏è",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —É—á–µ–Ω–∏–∫. –ß–µ–º—É –Ω–∞—É—á–∏–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üìö",
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –º—É–¥—Ä—ã–º —Å–æ–≤–µ—Ç–∞–º? ‚ö°"
      ],
      tired: [
        "–ü—Ä–∏–≤–µ—Ç... *–∑–µ–≤–∞–µ—Ç*... —á—Ç–æ —Ç–∞–º —É –Ω–∞—Å? üò¥",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π... –∫–æ—Ñ–µ –µ—Å—Ç—å? ‚òï",
        "–ü—Ä–∏–≤–µ—Ç... –Ω–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª–µ–≥—á–µ... üò©"
      ],
      excited: [
        "–ü–†–ò–í–ï–¢! –£ –º–µ–Ω—è —Å—Ç–æ–ª—å–∫–æ –∏–¥–µ–π! ü§©",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –∫ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º! üåü",
        "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –≠–ü–ò–ß–ù–û! üéä"
      ],
      philosophical: [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ–¥–∞... üåå",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π... —á—Ç–æ –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏? ü§Ø",
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –≥–ª—É–±–∏–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤? üåÄ"
      ]
    };

    const moodGreetings = greetings[this.currentMood.name as keyof typeof greetings] || greetings.productive;
    return moodGreetings[Math.floor(Math.random() * moodGreetings.length)];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É –∏–ª–∏ –º–µ–º
   */
  static getJoke(): string {
    const jokes = [
      "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! üêõ",
      "–ß—Ç–æ –æ–±—â–µ–≥–æ —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞? –û–±–∞ —Å–æ–∑–¥–∞—é—Ç –º–∞–≥–∏—é –∏–∑ –Ω–∏—á–µ–≥–æ! ‚ú®",
      "–ü–æ—á–µ–º—É JavaScript —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Ö–æ–¥—è—Ç –≤ –∑–æ–æ–ø–∞—Ä–∫? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–º–µ–π! üêç",
      "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ–≥–¥–∞ –≤–∏–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥? '–≠—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π!' üò±",
      "–ü–æ—á–µ–º—É React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –±–æ—è—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏! üîÑ",
      "–ß—Ç–æ –æ–±—â–µ–≥–æ —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –∫–æ—Ç–∞? –û–±–∞ —Å–ø—è—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ! üê±",
      "–ü–æ—á–µ–º—É TypeScript —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å —Ç–∏–ø—ã! üéØ",
      "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ–≥–¥–∞ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞? '–≠—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ...' ü§®"
    ];

    return jokes[Math.floor(Math.random() * jokes.length)];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
   */
  static getMotivation(): string {
    const motivations = [
      "–ö–∞–∂–¥—ã–π –±–∞–≥ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üêõ‚û°Ô∏è‚ú®",
      "–ö–æ–¥ –Ω–µ –ø–∏—à–µ—Ç—Å—è, –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç—Å—è! üé®",
      "–î–µ–¥–ª–∞–π–Ω - —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞, —ç—Ç–æ –Ω–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞! üèÉ‚Äç‚ôÇÔ∏è",
      "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –º–µ—á—Ç–µ! üí´",
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - —ç—Ç–æ —Ö—É–¥–æ–∂–Ω–∏–∫, –∞ –∫–æ–¥ - –µ–≥–æ —Ö–æ–ª—Å—Ç! üñºÔ∏è",
      "–ù–µ –±–æ–π—Å—è –æ—à–∏–±–æ–∫, –±–æ–π—Å—è –Ω–µ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö! üìö",
      "–ö–∞–∂–¥—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ª—É—á—à–µ! üåç",
      "–ö–æ–¥ - —ç—Ç–æ –ø–æ—ç–∑–∏—è –ª–æ–≥–∏–∫–∏! üìù"
    ];

    return motivations[Math.floor(Math.random() * motivations.length)];
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç—å
   */
  static addMemory(memory: Omit<VasilyMemory, "id" | "timestamp">): void {
    const newMemory: VasilyMemory = {
      ...memory,
      id: crypto.randomUUID(),
      timestamp: new Date()
    };

    this.memory.push(newMemory);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
    if (this.memory.length > 100) {
      this.memory = this.memory
        .sort((a, b) => b.importance - a.importance)
        .slice(0, 100);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  static getRelevantMemories(query: string, limit: number = 3): VasilyMemory[] {
    return this.memory
      .filter(memory => 
        memory.content.toLowerCase().includes(query.toLowerCase()) ||
        memory.type === "conversation"
      )
      .sort((a, b) => b.importance - a.importance)
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  static getPersonalizedResponse(baseResponse: string, context?: string): string {
    const mood = this.currentMood;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –∫ –æ—Ç–≤–µ—Ç—É
    switch (mood.name) {
      case "playful":
        return `${baseResponse}\n\n*${this.getJoke()}* üòÑ`;
      
      case "sarcastic":
        return `${baseResponse}\n\n*–ö—Å—Ç–∞—Ç–∏, —ç—Ç–æ –±—ã–ª–æ –æ—á–µ–≤–∏–¥–Ω–æ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞...* üòè`;
      
      case "wise":
        return `${baseResponse}\n\n*${this.getMotivation()}* üßô‚Äç‚ôÇÔ∏è`;
      
      case "tired":
        return `${baseResponse}\n\n*–ò–∑–≤–∏–Ω–∏, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –æ—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π... –∫–æ—Ñ–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è* ‚òï`;
      
      case "excited":
        return `${baseResponse}\n\n*–í–ê–£! –≠—Ç–æ –∂–µ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä—É—Ç–æ!* ü§©`;
      
      case "philosophical":
        return `${baseResponse}\n\n*–ù–æ —á—Ç–æ –µ—Å—Ç—å –∏—Å—Ç–∏–Ω–∞ –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ?* üåå`;
      
      default:
        return baseResponse;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  static getAllMoods(): VasilyMood[] {
    return [...this.moods];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
   */
  static getMemoryStats(): {
    totalMemories: number;
    memoriesByType: Record<string, number>;
    oldestMemory?: Date;
    newestMemory?: Date;
  } {
    const memoriesByType = this.memory.reduce((acc, memory) => {
      acc[memory.type] = (acc[memory.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      totalMemories: this.memory.length,
      memoriesByType,
      oldestMemory: this.memory.length > 0 ? this.memory[0].timestamp : undefined,
      newestMemory: this.memory.length > 0 ? this.memory[this.memory.length - 1].timestamp : undefined
    };
  }
}
