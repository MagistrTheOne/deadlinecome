"use client";

export interface TeamMessage {
  id: string;
  userId: string;
  userName: string;
  content: string;
  timestamp: Date;
  channel: string;
  type: "text" | "emoji" | "reaction" | "mention";
}

export interface MoodAnalysis {
  userId: string;
  userName: string;
  mood: "happy" | "stressed" | "productive" | "tired" | "frustrated" | "excited" | "worried" | "neutral";
  confidence: number; // 0-1
  factors: string[];
  timestamp: Date;
  trend: "improving" | "stable" | "declining";
}

export interface TeamMoodReport {
  overallMood: string;
  averageConfidence: number;
  stressLevel: number; // 0-1
  productivityLevel: number; // 0-1
  teamCohesion: number; // 0-1
  individualMoods: MoodAnalysis[];
  recommendations: string[];
  alerts: string[];
  lastUpdate: Date;
}

export class TeamMoodMonitor {
  private static messages: TeamMessage[] = [];
  private static moodHistory: MoodAnalysis[] = [];
  private static lastAnalysis: Date = new Date();

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  static addMessage(message: Omit<TeamMessage, "id" | "timestamp">): TeamMessage {
    const newMessage: TeamMessage = {
      ...message,
      id: crypto.randomUUID(),
      timestamp: new Date()
    };

    this.messages.push(newMessage);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
    if (this.messages.length > 1000) {
      this.messages = this.messages.slice(-1000);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    this.analyzeMood(newMessage);

    return newMessage;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static analyzeMood(message: TeamMessage): void {
    const moodAnalysis = this.analyzeMessageContent(message);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    this.moodHistory.push(moodAnalysis);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 500 –∞–Ω–∞–ª–∏–∑–∞–º–∏
    if (this.moodHistory.length > 500) {
      this.moodHistory = this.moodHistory.slice(-500);
    }

    this.lastAnalysis = new Date();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static analyzeMessageContent(message: TeamMessage): MoodAnalysis {
    const content = message.content.toLowerCase();
    const factors: string[] = [];
    let mood: MoodAnalysis["mood"] = "neutral";
    let confidence = 0.5;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const positiveWords = [
      "–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
      "—É—Å–ø–µ—Ö", "–ø–æ–±–µ–¥–∞", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–≥–æ—Ç–æ–≤–æ",
      "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "–ø–æ–º–æ–≥", "—Ä–µ—à–∏–ª", "–∏—Å–ø—Ä–∞–≤–∏–ª", "–¥–æ–±–∞–≤–∏–ª"
    ];

    const positiveCount = positiveWords.filter(word => content.includes(word)).length;
    if (positiveCount > 0) {
      mood = "happy";
      confidence = Math.min(0.9, 0.5 + positiveCount * 0.1);
      factors.push("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞");
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const negativeWords = [
      "–ø—Ä–æ–±–ª–µ–º–∞", "–æ—à–∏–±–∫–∞", "–±–∞–≥", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–æ–º–∞–ª", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è",
      "—É—Å—Ç–∞–ª", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "—Å—Ç—Ä–µ—Å—Å", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—Å–ª–æ–∂–Ω–æ", "—Ç—Ä—É–¥–Ω–æ",
      "–¥–µ–¥–ª–∞–π–Ω", "—Å—Ä–æ—á–Ω–æ", "–≥–æ—Ä—è—â–∏–π", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–≤–∞–∂–Ω–æ", "—Å—Ä–æ—á–Ω–æ"
    ];

    const negativeCount = negativeWords.filter(word => content.includes(word)).length;
    if (negativeCount > 0) {
      if (negativeCount > 2) {
        mood = "stressed";
        confidence = Math.min(0.9, 0.6 + negativeCount * 0.1);
      } else {
        mood = "frustrated";
        confidence = Math.min(0.8, 0.5 + negativeCount * 0.15);
      }
      factors.push("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞");
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
    const emojiPattern = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
    const emojis = content.match(emojiPattern) || [];
    
    if (emojis.length > 0) {
      const positiveEmojis = ["üòä", "üòÑ", "üòÅ", "ü§©", "üéâ", "üöÄ", "‚úÖ", "üëç", "üí™", "üî•"];
      const negativeEmojis = ["üòû", "üò¢", "üò§", "üò†", "üò∞", "üòì", "üòµ", "üíÄ", "üî•", "‚ö†Ô∏è"];
      
      const positiveEmojiCount = emojis.filter(emoji => positiveEmojis.includes(emoji)).length;
      const negativeEmojiCount = emojis.filter(emoji => negativeEmojis.includes(emoji)).length;
      
      if (positiveEmojiCount > negativeEmojiCount) {
        mood = "excited";
        confidence = Math.min(0.9, confidence + 0.2);
        factors.push("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏");
      } else if (negativeEmojiCount > positiveEmojiCount) {
        mood = "worried";
        confidence = Math.min(0.9, confidence + 0.2);
        factors.push("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏");
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (content.length > 200) {
      if (mood === "neutral") {
        mood = "productive";
        confidence = 0.6;
        factors.push("–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const hour = message.timestamp.getHours();
    if (hour < 6 || hour > 22) {
      if (mood === "neutral") {
        mood = "tired";
        confidence = 0.7;
        factors.push("–ü–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è");
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (content.includes("@") || content.includes("—É–ø–æ–º—è–Ω—É–ª")) {
      factors.push("–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–ª–ª–µ–≥");
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    if (content.includes("?") || content.includes("–∫–∞–∫") || content.includes("—á—Ç–æ")) {
      factors.push("–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    const recentMoods = this.moodHistory
      .filter(m => m.userId === message.userId)
      .slice(-5);
    
    let trend: MoodAnalysis["trend"] = "stable";
    if (recentMoods.length >= 3) {
      const recentMoodScores = recentMoods.map(m => this.getMoodScore(m.mood));
      const isImproving = recentMoodScores.every((score, index) => 
        index === 0 || score >= recentMoodScores[index - 1]
      );
      const isDeclining = recentMoodScores.every((score, index) => 
        index === 0 || score <= recentMoodScores[index - 1]
      );
      
      if (isImproving) trend = "improving";
      else if (isDeclining) trend = "declining";
    }

    return {
      userId: message.userId,
      userName: message.userName,
      mood,
      confidence,
      factors,
      timestamp: new Date(),
      trend
    };
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–π –±–∞–ª–ª
   */
  private static getMoodScore(mood: MoodAnalysis["mood"]): number {
    const scores: Record<MoodAnalysis["mood"], number> = {
      "happy": 1.0,
      "excited": 0.9,
      "productive": 0.8,
      "neutral": 0.5,
      "tired": 0.3,
      "worried": 0.2,
      "frustrated": 0.1,
      "stressed": 0.0
    };
    
    return scores[mood] || 0.5;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
   */
  static getTeamMoodReport(): TeamMoodReport {
    const now = new Date();
    const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const recentMoods = this.moodHistory.filter(mood => mood.timestamp >= last24Hours);
    
    if (recentMoods.length === 0) {
      return {
        overallMood: "neutral",
        averageConfidence: 0.5,
        stressLevel: 0.3,
        productivityLevel: 0.5,
        teamCohesion: 0.5,
        individualMoods: [],
        recommendations: ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"],
        alerts: [],
        lastUpdate: this.lastAnalysis
      };
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    const moodScores = recentMoods.map(mood => this.getMoodScore(mood.mood));
    const averageScore = moodScores.reduce((sum, score) => sum + score, 0) / moodScores.length;
    
    let overallMood: string;
    if (averageScore >= 0.8) overallMood = "excited";
    else if (averageScore >= 0.6) overallMood = "happy";
    else if (averageScore >= 0.4) overallMood = "neutral";
    else if (averageScore >= 0.2) overallMood = "worried";
    else overallMood = "stressed";

    // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞
    const stressMoods = recentMoods.filter(mood => 
      mood.mood === "stressed" || mood.mood === "frustrated" || mood.mood === "worried"
    );
    const stressLevel = stressMoods.length / recentMoods.length;

    // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const productiveMoods = recentMoods.filter(mood => 
      mood.mood === "productive" || mood.mood === "excited" || mood.mood === "happy"
    );
    const productivityLevel = productiveMoods.length / recentMoods.length;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    const teamCohesion = this.calculateTeamCohesion(recentMoods);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRecommendations(recentMoods, stressLevel, productivityLevel);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    const alerts = this.generateAlerts(recentMoods, stressLevel);

    return {
      overallMood,
      averageConfidence: recentMoods.reduce((sum, mood) => sum + mood.confidence, 0) / recentMoods.length,
      stressLevel,
      productivityLevel,
      teamCohesion,
      individualMoods: recentMoods,
      recommendations,
      alerts,
      lastUpdate: this.lastAnalysis
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
   */
  private static calculateTeamCohesion(moods: MoodAnalysis[]): number {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const userMoods = new Map<string, MoodAnalysis[]>();
    
    moods.forEach(mood => {
      if (!userMoods.has(mood.userId)) {
        userMoods.set(mood.userId, []);
      }
      userMoods.get(mood.userId)!.push(mood);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const userAverageMoods = new Map<string, number>();
    userMoods.forEach((userMoods, userId) => {
      const averageScore = userMoods.reduce((sum, mood) => sum + this.getMoodScore(mood.mood), 0) / userMoods.length;
      userAverageMoods.set(userId, averageScore);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (–º–µ–Ω—å—à–µ –¥–∏—Å–ø–µ—Ä—Å–∏—è = –±–æ–ª—å—à–µ —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å)
    const scores = Array.from(userAverageMoods.values());
    const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)
    return Math.max(0, 1 - variance);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  private static generateRecommendations(
    moods: MoodAnalysis[], 
    stressLevel: number, 
    productivityLevel: number
  ): string[] {
    const recommendations: string[] = [];

    if (stressLevel > 0.6) {
      recommendations.push("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.");
    }

    if (productivityLevel < 0.4) {
      recommendations.push("–ù–∏–∑–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.");
    }

    const tiredMembers = moods.filter(mood => mood.mood === "tired").length;
    if (tiredMembers > moods.length * 0.3) {
      recommendations.push("–ú–Ω–æ–≥–æ —É—Å—Ç–∞–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–±–æ—á—É—é –Ω–∞–≥—Ä—É–∑–∫—É.");
    }

    const frustratedMembers = moods.filter(mood => mood.mood === "frustrated").length;
    if (frustratedMembers > 0) {
      recommendations.push("–ï—Å—Ç—å —Ñ—Ä—É—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.");
    }

    const excitedMembers = moods.filter(mood => mood.mood === "excited").length;
    if (excitedMembers > moods.length * 0.5) {
      recommendations.push("–ö–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.");
    }

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  private static generateAlerts(moods: MoodAnalysis[], stressLevel: number): string[] {
    const alerts: string[] = [];

    if (stressLevel > 0.8) {
      alerts.push("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∫–æ–º–∞–Ω–¥–µ!");
    }

    const decliningTrends = moods.filter(mood => mood.trend === "declining").length;
    if (decliningTrends > moods.length * 0.4) {
      alerts.push("–£—Ö—É–¥—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    }

    const lowConfidenceMoods = moods.filter(mood => mood.confidence < 0.3).length;
    if (lowConfidenceMoods > moods.length * 0.3) {
      alerts.push("–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É –º–Ω–æ–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã");
    }

    return alerts;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getUserMood(userId: string): MoodAnalysis | null {
    const userMoods = this.moodHistory.filter(mood => mood.userId === userId);
    if (userMoods.length === 0) return null;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    return userMoods[userMoods.length - 1];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getUserMoodHistory(userId: string, days: number = 7): MoodAnalysis[] {
    const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
    return this.moodHistory.filter(mood => 
      mood.userId === userId && mood.timestamp >= cutoffDate
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
   */
  static getMoodStats(): {
    totalMessages: number;
    totalAnalyses: number;
    moodDistribution: Record<string, number>;
    averageConfidence: number;
    mostActiveUsers: Array<{ userId: string; userName: string; messageCount: number }>;
  } {
    const moodDistribution: Record<string, number> = {};
    let totalConfidence = 0;

    this.moodHistory.forEach(mood => {
      moodDistribution[mood.mood] = (moodDistribution[mood.mood] || 0) + 1;
      totalConfidence += mood.confidence;
    });

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userActivity = new Map<string, { userName: string; count: number }>();
    this.messages.forEach(message => {
      const existing = userActivity.get(message.userId);
      if (existing) {
        existing.count++;
      } else {
        userActivity.set(message.userId, { userName: message.userName, count: 1 });
      }
    });

    const mostActiveUsers = Array.from(userActivity.entries())
      .map(([userId, data]) => ({ userId, ...data }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    return {
      totalMessages: this.messages.length,
      totalAnalyses: this.moodHistory.length,
      moodDistribution,
      averageConfidence: this.moodHistory.length > 0 ? totalConfidence / this.moodHistory.length : 0,
      mostActiveUsers
    };
  }
}
