import { AIService } from "./ai-service";
import { VasilyPersonality } from "./vasily-personality";
import { gigaChatService } from "./gigachat";

export interface VasilyResponse {
  response: string;
  mood: string;
  emoji: string;
  statusMessage: string;
  suggestions?: string[];
  isProjectRelated: boolean;
  memoryUsed?: boolean;
  message?: string;
  actions?: string[];
}

export class VasilyService {
  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –í–∞—Å–∏–ª–∏–µ–º
   */
  static async chat(
    message: string,
    context?: {
      userId?: string;
      workspaceId?: string;
      projectId?: string;
      timeOfDay?: number;
      userActivity?: string;
    }
  ): Promise<VasilyResponse> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const mood = VasilyPersonality.updateMoodBasedOnContext({
        timeOfDay: context?.timeOfDay,
        userActivity: context?.userActivity,
        lastInteraction: new Date()
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
      const isProjectRelated = this.isProjectRelated(message);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const relevantMemories = VasilyPersonality.getRelevantMemories(message, 2);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const systemPrompt = this.buildSystemPrompt(mood, isProjectRelated, relevantMemories);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiResponse = await AIService.chat([
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: message
        }
      ]);

      // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const personalizedResponse = VasilyPersonality.getPersonalizedResponse(aiResponse, message);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
      VasilyPersonality.addMemory({
        type: isProjectRelated ? "project" : "conversation",
        content: `Q: ${message}\nA: ${personalizedResponse}`,
        importance: isProjectRelated ? 8 : 5
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const suggestions = this.generateSuggestions(message, isProjectRelated);

      return {
        response: personalizedResponse,
        mood: mood.name,
        emoji: mood.emoji,
        statusMessage: mood.statusMessage,
        suggestions,
        isProjectRelated,
        memoryUsed: relevantMemories.length > 0
      };

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –í–∞—Å–∏–ª–∏—è:", error);
      
      // Fallback –æ—Ç–≤–µ—Ç
      const fallbackMood = VasilyPersonality.getCurrentMood();
      return {
        response: "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏... *–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è* üîÑ",
        mood: fallbackMood.name,
        emoji: fallbackMood.emoji,
        statusMessage: fallbackMood.statusMessage,
        suggestions: ["–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"],
        isProjectRelated: false
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
   */
  private static isProjectRelated(message: string): boolean {
    const projectKeywords = [
      "–ø—Ä–æ–µ–∫—Ç", "–∑–∞–¥–∞—á–∞", "–¥–µ–¥–ª–∞–π–Ω", "–∫–æ–º–∞–Ω–¥–∞", "—Ä–∞–±–æ—Ç–∞", "–∫–æ–¥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
      "–±–∞–≥", "—Ñ–∏—á–∞", "—Å–ø—Ä–∏–Ω—Ç", "–±—ç–∫–ª–æ–≥", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "—Å—Ç–∞—Ç—É—Å", "–æ—Ç—á–µ—Ç",
      "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–º–µ—Ç—Ä–∏–∫–∏", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ];

    const lowerMessage = message.toLowerCase();
    return projectKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private static buildSystemPrompt(
    mood: any,
    isProjectRelated: boolean,
    memories: any[]
  ): string {
    let basePrompt = `–¢—ã - –í–∞—Å–∏–ª–∏–π, AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —è—Ä–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º "${mood.name}". 
    –¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood.description}
    –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤: ${mood.responseStyle}
    
    –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –Ω–æ –∏ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏:
    - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    - –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Ñ–∞–∫—Ç—ã
    - –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    - –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    - –®—É—Ç–∫–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    - –û–±—É—á–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è`;

    if (isProjectRelated) {
      basePrompt += `
    
    –°–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    - –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    - –ê–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö
    - –ö–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ`;
    } else {
      basePrompt += `
    
    –°–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.
    –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä, –ø—Ä–∏–º–µ—Ä—ã, –∞–Ω–∞–ª–æ–≥–∏–∏.`;
    }

    if (memories.length > 0) {
      basePrompt += `
    
    –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:
    ${memories.map(m => `- ${m.content}`).join('\n')}`;
    }

    basePrompt += `
    
    –û—Ç–≤–µ—á–∞–π –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.
    –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.`;

    return basePrompt;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static generateSuggestions(message: string, isProjectRelated: boolean): string[] {
    if (isProjectRelated) {
      return [
        "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞",
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
      ];
    } else {
      const suggestions = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
        "–û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
        "–î–∞–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
        "–ü–æ–º–æ–≥–∏ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π",
        "–û–±—Å—É–¥–∏–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
        "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
      ];
      
      return suggestions.slice(0, 3);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –í–∞—Å–∏–ª–∏—è
   */
  static getStatus(): {
    mood: string;
    emoji: string;
    statusMessage: string;
    memoryStats: any;
    isOnline: boolean;
  } {
    const mood = VasilyPersonality.getCurrentMood();
    const memoryStats = VasilyPersonality.getMemoryStats();

    return {
      mood: mood.name,
      emoji: mood.emoji,
      statusMessage: mood.statusMessage,
      memoryStats,
      isOnline: true
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –í–∞—Å–∏–ª–∏—è
   */
  static changeMood(moodName: string): VasilyResponse {
    const newMood = VasilyPersonality.changeMood(moodName);
    
    return {
      response: VasilyPersonality.getGreeting(),
      mood: newMood.name,
      emoji: newMood.emoji,
      statusMessage: newMood.statusMessage,
      suggestions: ["–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –∂–∏–∑–Ω–∏"],
      isProjectRelated: false
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –æ—Ç –í–∞—Å–∏–ª–∏—è
   */
  static getJoke(): VasilyResponse {
    const mood = VasilyPersonality.getCurrentMood();
    const joke = VasilyPersonality.getJoke();
    
    return {
      response: joke,
      mood: mood.name,
      emoji: mood.emoji,
      statusMessage: mood.statusMessage,
      suggestions: ["–ï—â–µ –æ–¥–Ω—É —à—É—Ç–∫—É", "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö", "–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π"],
      isProjectRelated: false
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –æ—Ç –í–∞—Å–∏–ª–∏—è
   */
  static getMotivation(): VasilyResponse {
    const mood = VasilyPersonality.getCurrentMood();
    const motivation = VasilyPersonality.getMotivation();
    
    return {
      response: motivation,
      mood: mood.name,
      emoji: mood.emoji,
      statusMessage: mood.statusMessage,
      suggestions: ["–ë–æ–ª—å—à–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É"],
      isProjectRelated: false
    };
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –í–∞—Å–∏–ª–∏—è
   */
  static async handleSpecialCommand(command: string): Promise<VasilyResponse> {
    const lowerCommand = command.toLowerCase().trim();

    switch (lowerCommand) {
      case "/joke":
      case "/—à—É—Ç–∫–∞":
        return this.getJoke();

      case "/mood":
      case "/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        const mood = VasilyPersonality.getCurrentMood();
        return {
          response: `–ú–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood.description} ${mood.emoji}`,
          mood: mood.name,
          emoji: mood.emoji,
          statusMessage: mood.statusMessage,
          suggestions: ["–ò–∑–º–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", "–î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é"],
          isProjectRelated: false
        };

      case "/motivation":
      case "/–º–æ—Ç–∏–≤–∞—Ü–∏—è":
        return this.getMotivation();

      case "/memory":
      case "/–ø–∞–º—è—Ç—å":
        const stats = VasilyPersonality.getMemoryStats();
        return {
          response: `–£ –º–µ–Ω—è –≤ –ø–∞–º—è—Ç–∏ ${stats.totalMemories} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–∏–ø—ã: ${Object.keys(stats.memoriesByType).join(", ")} üß†`,
          mood: VasilyPersonality.getCurrentMood().name,
          emoji: "üß†",
          statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞–º—è—Ç—å'",
          suggestions: ["–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö", "–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π", "–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –∂–∏–∑–Ω–∏"],
          isProjectRelated: false
        };

      case "/help":
      case "/–ø–æ–º–æ—â—å":
        return {
          response: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
          /joke - —Ä–∞—Å—Å–∫–∞–∂—É —à—É—Ç–∫—É üòÑ
          /mood - –ø–æ–∫–∞–∂—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ü§î
          /motivation - –¥–∞–º –º–æ—Ç–∏–≤–∞—Ü–∏—é üí™
          /memory - –ø–æ–∫–∞–∂—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ üß†
          /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ üìö
          
          –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π –æ —á–µ–º —É–≥–æ–¥–Ω–æ!`,
          mood: VasilyPersonality.getCurrentMood().name,
          emoji: "üìö",
          statusMessage: "–í–∞—Å–∏–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ '–ø–æ–º–æ—â–Ω–∏–∫'",
          suggestions: ["–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –∂–∏–∑–Ω–∏"],
          isProjectRelated: false
        };

      default:
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return this.chat(command);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ —Å GigaChat
   */
  static async generateResponse(params: {
    message: string;
    context: Array<{ query: string; response: string; timestamp: Date }>;
    workspaceId?: string;
    projectId?: string;
    userId: string;
  }): Promise<VasilyResponse> {
    try {
      const { message, context, workspaceId, projectId, userId } = params;

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const mood = VasilyPersonality.updateMoodBasedOnContext({
        timeOfDay: new Date().getHours(),
        userActivity: 'chat',
        lastInteraction: new Date()
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
      const isProjectRelated = this.isProjectRelated(message);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const relevantMemories = VasilyPersonality.getRelevantMemories(message, 2);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GigaChat
      const contextStrings = context.map(conv => conv.query);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
      const gigaChatMessages = gigaChatService.createVasilyContext(message, contextStrings);
      const aiResponse = await gigaChatService.sendMessage(gigaChatMessages);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
      VasilyPersonality.addMemory({
        type: "conversation",
        content: message,
        importance: 5
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const suggestions = this.generateSuggestions(message, isProjectRelated);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      const actions = this.generateActions(message, isProjectRelated);

      return {
        message: aiResponse,
        response: aiResponse,
        mood: mood.name,
        emoji: mood.emoji,
        statusMessage: mood.statusMessage,
        suggestions,
        isProjectRelated,
        memoryUsed: relevantMemories.length > 0,
        actions
      };

    } catch (error) {
      console.error("Error generating Vasily response:", error);
      
      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π AI –µ—Å–ª–∏ GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        const fallbackResponse = await this.generateFallbackResponse(params.message, params.context);
        return fallbackResponse;
      } catch (fallbackError) {
        console.error("Fallback AI also failed:", fallbackError);
        return {
          message: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          mood: "confused",
          emoji: "üòï",
          statusMessage: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
          suggestions: ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"],
          isProjectRelated: false,
          memoryUsed: false,
          actions: []
        };
      }
    }
  }

  /**
   * Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GigaChat
   */
  private static async generateFallbackResponse(
    message: string, 
    context: Array<{ query: string; response: string; timestamp: Date }>
  ): Promise<VasilyResponse> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π AI –∫–∞–∫ fallback
    const mood = VasilyPersonality.getCurrentMood();
    const isProjectRelated = this.isProjectRelated(message);
    
    const systemPrompt = this.buildSystemPrompt(mood, isProjectRelated, []);
    const contextMessages = context.flatMap(conv => [
      { role: "user" as const, content: conv.query },
      { role: "assistant" as const, content: conv.response }
    ]);

    const aiResponse = await AIService.chat([
      { role: "system", content: systemPrompt },
      ...contextMessages,
      { role: "user", content: message }
    ]);

    return {
      message: aiResponse,
      response: aiResponse,
      mood: mood.name,
      emoji: mood.emoji,
      statusMessage: mood.statusMessage,
      suggestions: this.generateSuggestions(message, isProjectRelated),
      isProjectRelated,
      memoryUsed: false,
      actions: this.generateActions(message, isProjectRelated)
    };
  }


  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  private static generateActions(message: string, isProjectRelated: boolean): string[] {
    const actions: string[] = [];
    
    if (isProjectRelated) {
      actions.push("view_project", "create_task", "assign_task");
    }
    
    if (message.toLowerCase().includes('–∞–Ω–∞–ª–∏—Ç–∏–∫–∞') || message.toLowerCase().includes('analytics')) {
      actions.push("view_analytics", "generate_report");
    }
    
    if (message.toLowerCase().includes('–∫–æ–º–∞–Ω–¥–∞') || message.toLowerCase().includes('team')) {
      actions.push("view_team", "invite_member");
    }
    
    return actions;
  }
}
