import { GigaChatService } from './gigachat-service';

interface AISpecialist {
  id: string;
  name: string;
  specialization: string;
  description: string;
  skills: string[];
  experience: number; // years
  rating: number; // 0-5
  price: number; // per hour
  availability: 'available' | 'busy' | 'offline';
  personality: {
    communicationStyle: string;
    workingHours: string;
    collaborationStyle: string;
  };
  reviews: Array<{
    rating: number;
    comment: string;
    project: string;
    timestamp: Date;
  }>;
}

interface AIPackage {
  id: string;
  name: string;
  description: string;
  specialists: string[];
  price: number;
  duration: number; // days
  features: string[];
  targetAudience: string[];
}

class AIMarketplace {
  private specialists: AISpecialist[] = [];
  private packages: AIPackage[] = [];
  private gigachat: GigaChatService;

  constructor() {
    this.gigachat = new GigaChatService();
    this.initializeMarketplace();
  }

  private initializeMarketplace() {
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI
    this.specialists = [
      {
        id: 'ai-maria',
        name: '–ú–∞—Ä–∏—è',
        specialization: 'UI/UX Design',
        description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É –∏ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        skills: ['Figma', 'Adobe XD', 'User Research', 'Prototyping', 'Accessibility'],
        experience: 5,
        rating: 4.8,
        price: 45,
        availability: 'available',
        personality: {
          communicationStyle: 'Creative and intuitive',
          workingHours: '9:00-18:00',
          collaborationStyle: 'Collaborative and user-focused'
        },
        reviews: []
      },
      {
        id: 'ai-dmitry',
        name: '–î–º–∏—Ç—Ä–∏–π',
        specialization: 'DevOps & Infrastructure',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–ª–∞—á–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º',
        skills: ['AWS', 'Docker', 'Kubernetes', 'CI/CD', 'Monitoring'],
        experience: 7,
        rating: 4.9,
        price: 60,
        availability: 'available',
        personality: {
          communicationStyle: 'Technical and systematic',
          workingHours: '24/7',
          collaborationStyle: 'Methodical and reliable'
        },
        reviews: []
      },
      {
        id: 'ai-elena',
        name: '–ï–ª–µ–Ω–∞',
        specialization: 'Data Science & Analytics',
        description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é',
        skills: ['Python', 'R', 'SQL', 'Machine Learning', 'Statistics'],
        experience: 6,
        rating: 4.7,
        price: 55,
        availability: 'busy',
        personality: {
          communicationStyle: 'Analytical and data-driven',
          workingHours: '10:00-19:00',
          collaborationStyle: 'Research-oriented'
        },
        reviews: []
      },
      {
        id: 'ai-alexander',
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        specialization: 'Mobile Development',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (iOS/Android)',
        skills: ['React Native', 'Flutter', 'Swift', 'Kotlin', 'Mobile UX'],
        experience: 4,
        rating: 4.6,
        price: 50,
        availability: 'available',
        personality: {
          communicationStyle: 'Innovative and mobile-first',
          workingHours: '9:00-17:00',
          collaborationStyle: 'Agile and iterative'
        },
        reviews: []
      }
    ];

    // –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã AI
    this.packages = [
      {
        id: 'startup-package',
        name: '–°—Ç–∞—Ä—Ç–∞–ø –ø–∞–∫–µ—Ç',
        description: '–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä AI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞',
        specialists: ['ai-vasily', 'ai-vladimir', 'ai-maria', 'ai-dmitry'],
        price: 299,
        duration: 30,
        features: [
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º',
          'Code Review',
          'UI/UX Design',
          'DevOps –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
          '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ],
        targetAudience: ['–°—Ç–∞—Ä—Ç–∞–ø—ã', 'MVP –ø—Ä–æ–µ–∫—Ç—ã']
      },
      {
        id: 'enterprise-package',
        name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π',
        specialists: ['ai-vasily', 'ai-vladimir', 'ai-olga', 'ai-pavel', 'ai-elena'],
        price: 999,
        duration: 90,
        features: [
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
          '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
          '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
          '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        ],
        targetAudience: ['–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏', 'Enterprise']
      }
    ];
  }

  async searchSpecialists(criteria: {
    specialization?: string;
    maxPrice?: number;
    minRating?: number;
    skills?: string[];
  }): Promise<AISpecialist[]> {
    let results = [...this.specialists];

    if (criteria.specialization) {
      results = results.filter(s => 
        s.specialization.toLowerCase().includes(criteria.specialization!.toLowerCase())
      );
    }

    if (criteria.maxPrice) {
      results = results.filter(s => s.price <= criteria.maxPrice!);
    }

    if (criteria.minRating) {
      results = results.filter(s => s.rating >= criteria.minRating!);
    }

    if (criteria.skills && criteria.skills.length > 0) {
      results = results.filter(s => 
        criteria.skills!.some(skill => 
          s.skills.some(specialistSkill => 
            specialistSkill.toLowerCase().includes(skill.toLowerCase())
          )
        )
      );
    }

    return results.sort((a, b) => b.rating - a.rating);
  }

  async getSpecialistDetails(specialistId: string): Promise<AISpecialist | null> {
    return this.specialists.find(s => s.id === specialistId) || null;
  }

  async hireSpecialist(
    specialistId: string,
    projectId: string,
    duration: number,
    requirements: string
  ): Promise<{
    success: boolean;
    contractId: string;
    startDate: Date;
    endDate: Date;
    totalCost: number;
  }> {
    const specialist = this.specialists.find(s => s.id === specialistId);
    if (!specialist) {
      throw new Error('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (specialist.availability !== 'available') {
      throw new Error('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const contractId = `contract_${Date.now()}`;
    const startDate = new Date();
    const endDate = new Date(startDate.getTime() + duration * 24 * 60 * 60 * 1000);
    const totalCost = specialist.price * duration * 8; // 8 hours per day

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    specialist.availability = 'busy';

    console.log(`ü§ù ${specialist.name} –Ω–∞–Ω—è—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);

    return {
      success: true,
      contractId,
      startDate,
      endDate,
      totalCost
    };
  }

  async getPackages(): Promise<AIPackage[]> {
    return this.packages;
  }

  async purchasePackage(
    packageId: string,
    projectId: string
  ): Promise<{
    success: boolean;
    package: AIPackage;
    specialists: AISpecialist[];
    startDate: Date;
  }> {
    const package_ = this.packages.find(p => p.id === packageId);
    if (!package_) {
      throw new Error('–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const specialists = this.specialists.filter(s => 
      package_.specialists.includes(s.id)
    );

    console.log(`üì¶ –ü–∞–∫–µ—Ç "${package_.name}" –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);

    return {
      success: true,
      package: package_,
      specialists,
      startDate: new Date()
    };
  }

  async addReview(
    specialistId: string,
    rating: number,
    comment: string,
    project: string
  ): Promise<void> {
    const specialist = this.specialists.find(s => s.id === specialistId);
    if (!specialist) {
      throw new Error('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    specialist.reviews.push({
      rating,
      comment,
      project,
      timestamp: new Date()
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    const totalRating = specialist.reviews.reduce((sum, review) => sum + review.rating, 0);
    specialist.rating = totalRating / specialist.reviews.length;

    console.log(`‚≠ê –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${specialist.name}: ${rating}/5`);
  }

  getMarketplaceStats() {
    const totalSpecialists = this.specialists.length;
    const availableSpecialists = this.specialists.filter(s => s.availability === 'available').length;
    const averageRating = this.specialists.reduce((sum, s) => sum + s.rating, 0) / totalSpecialists;
    const totalPackages = this.packages.length;

    return {
      totalSpecialists,
      availableSpecialists,
      averageRating: Math.round(averageRating * 10) / 10,
      totalPackages,
      topSpecializations: this.getTopSpecializations()
    };
  }

  private getTopSpecializations(): string[] {
    const specializations = this.specialists.map(s => s.specialization);
    const counts: { [key: string]: number } = {};
    
    specializations.forEach(spec => {
      counts[spec] = (counts[spec] || 0) + 1;
    });

    return Object.entries(counts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([spec, _]) => spec);
  }
}

export const AIMarketplaceInstance = new AIMarketplace();
