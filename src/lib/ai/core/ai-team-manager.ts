/**
 * AI Team Manager - Unified system for managing all AI specialists
 * Provides switching between different AI personalities and unified API
 */

import { askVasily } from '../vasily-service';
import { AIClient } from './ai-client';
import { GigaChatProvider } from './providers/gigachat';
import { OpenAIProvider } from './providers/openai';
import { CircuitBreaker } from './resilience/circuit-breaker';
import { TokenBucket } from './resilience/rate-limit';
import { cache, aiCacheKey } from './cache/cache';
import { loadSystem } from './prompts';

// AI Specialist Types
export enum AISpecialistType {
  VASILY = 'vasily',           // Project Manager
  OLGA = 'olga',              // Security Expert
  PAVEL = 'pavel',            // Performance Engineer
  MIKHAIL = 'mikhail',        // Sprint Planning
  TATYANA = 'tatyana',        // Documentation
  SVETLANA = 'svetlana',      // Analytics
  ANDREY = 'andrey',          // DevOps
  ANNA = 'anna',              // QA Lead
  DMITRY = 'dmitry',          // Architecture
  MARIA = 'maria',            // UX/UI Designer
  ALEXEY = 'alexey',          // Code Reviewer
  IRINA = 'irina',            // HR Analytics
  SERGEY = 'sergey'           // Technical Writer
}

export interface AISpecialistInfo {
  id: AISpecialistType;
  name: string;
  role: string;
  specialization: string;
  avatar: string;
  color: string;
  skills: string[];
  personality: string;
  available: boolean;
  mood: 'productive' | 'thinking' | 'excited' | 'focused' | 'relaxed';
}

export interface AIChatRequest {
  message: string;
  specialist: AISpecialistType;
  context?: {
    userId?: string;
    workspaceId?: string;
    projectId?: string;
    timeOfDay?: number;
    userActivity?: string;
  };
}

export interface AIChatResponse {
  message: string;
  specialist: AISpecialistInfo;
  mood: string;
  emoji: string;
  suggestions?: string[];
  actions?: Array<{
    type: string;
    label: string;
    data: any;
  }>;
  timestamp: string;
  context?: any;
}

// Specialist Registry
const SPECIALISTS: Record<AISpecialistType, AISpecialistInfo> = {
  [AISpecialistType.VASILY]: {
    id: AISpecialistType.VASILY,
    name: '–í–∞—Å–∏–ª–∏–π',
    role: 'AI Project Manager',
    specialization: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
    avatar: 'üë®‚Äçüíº',
    color: 'blue',
    skills: ['Project Management', 'Process Optimization', 'Risk Assessment', 'Team Coordination'],
    personality: '–û–ø—ã—Ç–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å —é–º–æ—Ä–æ–º, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å',
    available: true,
    mood: 'productive'
  },
  [AISpecialistType.OLGA]: {
    id: AISpecialistType.OLGA,
    name: '–û–ª—å–≥–∞',
    role: 'AI Security Expert',
    specialization: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
    avatar: 'üë©‚Äçüîí',
    color: 'red',
    skills: ['Security Auditing', 'Vulnerability Assessment', 'Penetration Testing', 'Compliance'],
    personality: '–¢—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—Å–µ–≥–¥–∞ –±–¥–∏—Ç–µ–ª—å–Ω–∞ –∫ —É–≥—Ä–æ–∑–∞–º',
    available: true,
    mood: 'focused'
  },
  [AISpecialistType.PAVEL]: {
    id: AISpecialistType.PAVEL,
    name: '–ü–∞–≤–µ–ª',
    role: 'AI Performance Engineer',
    specialization: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
    avatar: 'üë®‚Äçüîß',
    color: 'green',
    skills: ['Performance Tuning', 'Load Testing', 'Database Optimization', 'Caching'],
    personality: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç, –ª—é–±–∏—Ç —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    available: true,
    mood: 'focused'
  },
  [AISpecialistType.MIKHAIL]: {
    id: AISpecialistType.MIKHAIL,
    name: '–ú–∏—Ö–∞–∏–ª',
    role: 'AI Sprint Planning',
    specialization: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤, –æ—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤',
    avatar: 'üë®‚ÄçüìÖ',
    color: 'purple',
    skills: ['Sprint Planning', 'Task Estimation', 'Risk Analysis', 'Velocity Tracking'],
    personality: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å, –ª—é–±–∏—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–µ—Ä–µ–¥',
    available: true,
    mood: 'thinking'
  },
  [AISpecialistType.TATYANA]: {
    id: AISpecialistType.TATYANA,
    name: '–¢–∞—Ç—å—è–Ω–∞',
    role: 'AI Documentation Specialist',
    specialization: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, API docs, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    avatar: 'üë©‚Äçüìù',
    color: 'pink',
    skills: ['Technical Writing', 'API Documentation', 'Code Comments', 'User Guides'],
    personality: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∫ –¥–µ—Ç–∞–ª—è–º',
    available: true,
    mood: 'productive'
  },
  [AISpecialistType.SVETLANA]: {
    id: AISpecialistType.SVETLANA,
    name: '–°–≤–µ—Ç–ª–∞–Ω–∞',
    role: 'AI Analytics Expert',
    specialization: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∏–Ω—Å–∞–π—Ç—ã',
    avatar: 'üë©‚Äçüíº',
    color: 'orange',
    skills: ['Data Analysis', 'Predictive Modeling', 'Business Intelligence', 'Reporting'],
    personality: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º, –ª—é–±–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏',
    available: true,
    mood: 'thinking'
  },
  [AISpecialistType.ANDREY]: {
    id: AISpecialistType.ANDREY,
    name: '–ê–Ω–¥—Ä–µ–π',
    role: 'AI DevOps Engineer',
    specialization: 'CI/CD, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
    avatar: 'üë®‚Äçüíª',
    color: 'cyan',
    skills: ['CI/CD', 'Infrastructure as Code', 'Containerization', 'Monitoring'],
    personality: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä, –ª—é–±–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é',
    available: true,
    mood: 'productive'
  },
  [AISpecialistType.ANNA]: {
    id: AISpecialistType.ANNA,
    name: '–ê–Ω–Ω–∞',
    role: 'AI QA Lead',
    specialization: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, QA –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    avatar: 'üë©‚Äçüî¨',
    color: 'teal',
    skills: ['Test Automation', 'Quality Assurance', 'Bug Tracking', 'Test Strategy'],
    personality: '–¢—â–∞—Ç–µ–ª—å–Ω–∞—è –∏ –º–µ—Ç–æ–¥–∏—á–Ω–∞—è, –ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫',
    available: false,
    mood: 'focused'
  },
  [AISpecialistType.DMITRY]: {
    id: AISpecialistType.DMITRY,
    name: '–î–º–∏—Ç—Ä–∏–π',
    role: 'AI Architect',
    specialization: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º, –¥–∏–∑–∞–π–Ω –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å',
    avatar: 'üë®‚ÄçüèóÔ∏è',
    color: 'indigo',
    skills: ['System Architecture', 'Design Patterns', 'Scalability', 'Microservices'],
    personality: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å –≤–∏–¥–µ–Ω–∏–µ–º, –ª—é–±–∏—Ç —Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
    available: false,
    mood: 'thinking'
  },
  [AISpecialistType.MARIA]: {
    id: AISpecialistType.MARIA,
    name: '–ú–∞—Ä–∏—è',
    role: 'AI UX/UI Designer',
    specialization: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
    avatar: 'üë©‚Äçüé®',
    color: 'rose',
    skills: ['UI/UX Design', 'Prototyping', 'User Research', 'Design Systems'],
    personality: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –ª—é–±–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã',
    available: false,
    mood: 'excited'
  },
  [AISpecialistType.ALEXEY]: {
    id: AISpecialistType.ALEXEY,
    name: '–ê–ª–µ–∫—Å–µ–π',
    role: 'AI Code Reviewer',
    specialization: 'Code review, –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, best practices',
    avatar: 'üë®‚Äç‚öñÔ∏è',
    color: 'slate',
    skills: ['Code Review', 'Code Quality', 'Best Practices', 'Refactoring'],
    personality: '–°—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –∫—Ä–∏—Ç–∏–∫ –∫–æ–¥–∞',
    available: false,
    mood: 'focused'
  },
  [AISpecialistType.IRINA]: {
    id: AISpecialistType.IRINA,
    name: '–ò—Ä–∏–Ω–∞',
    role: 'AI HR Analytics',
    specialization: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è',
    avatar: 'üë©‚Äçüíº',
    color: 'emerald',
    skills: ['Team Analytics', 'Motivation', 'Burnout Prevention', 'Team Dynamics'],
    personality: '–≠–º–ø–∞—Ç–∏—á–Ω–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –ª—é–±–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏',
    available: false,
    mood: 'relaxed'
  },
  [AISpecialistType.SERGEY]: {
    id: AISpecialistType.SERGEY,
    name: '–°–µ—Ä–≥–µ–π',
    role: 'AI Technical Writer',
    specialization: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, –±–ª–æ–≥-–ø–æ—Å—Ç—ã',
    avatar: 'üë®‚Äç‚úçÔ∏è',
    color: 'amber',
    skills: ['Technical Writing', 'Content Creation', 'Knowledge Base', 'Blog Writing'],
    personality: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π, –ª—é–±–∏—Ç –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ–µ',
    available: false,
    mood: 'productive'
  }
};

// Unified AI Client
const cb = new CircuitBreaker({ threshold: 3, cooldownMs: 15000 });
const buckets = new Map<string, TokenBucket>();
function bucket(key: string) {
  if (!buckets.has(key)) buckets.set(key, new TokenBucket(10, 2));
  return buckets.get(key)!;
}

const client = new AIClient(
  new GigaChatProvider({ baseUrl: process.env.GIGACHAT_BASE!, apiKey: process.env.GIGACHAT_KEY! }),
  new OpenAIProvider({ apiKey: process.env.OPENAI_API_KEY! })
);

export class AITeamManager {
  private static instance: AITeamManager;

  static getInstance(): AITeamManager {
    if (!AITeamManager.instance) {
      AITeamManager.instance = new AITeamManager();
    }
    return AITeamManager.instance;
  }

  /**
   * Get all available AI specialists
   */
  getAllSpecialists(): AISpecialistInfo[] {
    return Object.values(SPECIALISTS);
  }

  /**
   * Get available specialists only
   */
  getAvailableSpecialists(): AISpecialistInfo[] {
    return Object.values(SPECIALISTS).filter(s => s.available);
  }

  /**
   * Get specialist by type
   */
  getSpecialist(type: AISpecialistType): AISpecialistInfo | null {
    return SPECIALISTS[type] || null;
  }

  /**
   * Unified chat with any AI specialist
   */
  async chat(request: AIChatRequest): Promise<AIChatResponse> {
    const specialist = this.getSpecialist(request.specialist);
    if (!specialist) {
      throw new Error(`AI specialist ${request.specialist} not found`);
    }

    if (!specialist.available) {
      throw new Error(`AI specialist ${specialist.name} is currently unavailable`);
    }

    // Special handling for Vasily (existing implementation)
    if (request.specialist === AISpecialistType.VASILY) {
      const vasilyResponse = await askVasily(request.message, {
        userId: request.context?.userId,
        route: `ai-${request.specialist}`
      });

      return {
        message: vasilyResponse.message || vasilyResponse.response,
        specialist,
        mood: vasilyResponse.mood || 'productive',
        emoji: vasilyResponse.emoji || 'ü§ñ',
        suggestions: vasilyResponse.suggestions,
        actions: vasilyResponse.actions,
        timestamp: new Date().toISOString(),
        context: request.context
      };
    }

    // Generic AI response for other specialists
    const cacheKey = aiCacheKey({
      route: `ai-${request.specialist}`,
      prompt: request.message,
      user: request.context?.userId
    });

    // Check cache
    const cached = await cache.get<any>(cacheKey);
    if (cached) {
      return {
        ...cached,
        specialist,
        timestamp: new Date().toISOString()
      };
    }

    // Rate limiting
    const userKey = request.context?.userId || 'anon';
    if (!bucket(userKey).allow(1)) {
      throw new Error('rate-limited');
    }

    // Load specialist-specific system prompt
    const systemPrompt = await this.loadSpecialistPrompt(request.specialist, request.context);

    // Get AI response
    const aiResponse = await cb.exec(() =>
      client.chat({
        prompt: request.message,
        system: systemPrompt,
        json: true
      })
    );

    // Format response
    const response: AIChatResponse = {
      message: aiResponse.response || aiResponse.message || `Hello from ${specialist.name}!`,
      specialist,
      mood: specialist.mood,
      emoji: specialist.avatar,
      suggestions: this.generateSpecialistSuggestions(request.specialist, request.message),
      actions: this.generateSpecialistActions(request.specialist, request.context),
      timestamp: new Date().toISOString(),
      context: request.context
    };

    // Cache response
    await cache.set(cacheKey, response, 120);

    return response;
  }

  /**
   * Load specialist-specific system prompt
   */
  private async loadSpecialistPrompt(
    specialist: AISpecialistType,
    context?: any
  ): Promise<string> {
    try {
      // Try to load specialist-specific prompt
      return await loadSystem(specialist);
    } catch {
      // Fallback to generic specialist prompt
      const specialistInfo = SPECIALISTS[specialist];
      return `You are ${specialistInfo.name}, a ${specialistInfo.role} specializing in ${specialistInfo.specialization}.
Your personality: ${specialistInfo.personality}
Your skills: ${specialistInfo.skills.join(', ')}

Always respond in Russian and be helpful, professional, and engaging.
Context: ${JSON.stringify(context || {})}`;
    }
  }

  /**
   * Generate specialist-specific suggestions
   */
  private generateSpecialistSuggestions(specialist: AISpecialistType, message: string): string[] {
    const suggestions: Record<AISpecialistType, string[]> = {
      [AISpecialistType.VASILY]: ['–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'],
      [AISpecialistType.OLGA]: ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏', '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É'],
      [AISpecialistType.PAVEL]: ['–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞', '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      [AISpecialistType.MIKHAIL]: ['–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø—Ä–∏–Ω—Ç', '–û—Ü–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏'],
      [AISpecialistType.TATYANA]: ['–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é', '–ù–∞–ø–∏—Å–∞—Ç—å API docs', '–û–±–Ω–æ–≤–∏—Ç—å README'],
      [AISpecialistType.SVETLANA]: ['–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É', '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', '–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏'],
      [AISpecialistType.ANDREY]: ['–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ø–ª–æ–π', '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É'],
      [AISpecialistType.ANNA]: ['–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç-–∫–µ–π—Å—ã', '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ù–∞–π—Ç–∏ –±–∞–≥–∏'],
      [AISpecialistType.DMITRY]: ['–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É', '–í—ã–±—Ä–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      [AISpecialistType.MARIA]: ['–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω', '–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞—Ç—å UI', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å UX'],
      [AISpecialistType.ALEXEY]: ['–ü—Ä–æ–≤–µ—Å—Ç–∏ code review', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ', '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥'],
      [AISpecialistType.IRINA]: ['–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É', '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ', '–ü–æ–≤—ã—Å–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é'],
      [AISpecialistType.SERGEY]: ['–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é', '–°–æ–∑–¥–∞—Ç—å –≥–∞–π–¥', '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å']
    };

    return suggestions[specialist] || ['–ü–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–µ–π', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–î–∞—Ç—å —Å–æ–≤–µ—Ç'];
  }

  /**
   * Generate specialist-specific actions
   */
  private generateSpecialistActions(specialist: AISpecialistType, context?: any): Array<{ type: string; label: string; data: any }> {
    const actions: Record<AISpecialistType, Array<{ type: string; label: string; data: any }>> = {
      [AISpecialistType.VASILY]: [
        { type: 'create_task', label: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', data: { projectId: context?.projectId } },
        { type: 'view_analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.OLGA]: [
        { type: 'security_scan', label: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', data: { projectId: context?.projectId } },
        { type: 'vulnerability_check', label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.PAVEL]: [
        { type: 'performance_analysis', label: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', data: { projectId: context?.projectId } },
        { type: 'optimization_suggestions', label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.MIKHAIL]: [
        { type: 'sprint_planning', label: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞', data: { projectId: context?.projectId } },
        { type: 'risk_assessment', label: '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.TATYANA]: [
        { type: 'generate_docs', label: '–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é', data: { projectId: context?.projectId } },
        { type: 'api_docs', label: '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å API', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.SVETLANA]: [
        { type: 'show_analytics', label: '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É', data: { projectId: context?.projectId } },
        { type: 'generate_report', label: '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.ANDREY]: [
        { type: 'setup_cicd', label: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD', data: { projectId: context?.projectId } },
        { type: 'deployment_status', label: '–°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.ANNA]: [
        { type: 'create_tests', label: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç—ã', data: { projectId: context?.projectId } },
        { type: 'run_tests', label: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.DMITRY]: [
        { type: 'architecture_review', label: '–†–µ–≤—å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', data: { projectId: context?.projectId } },
        { type: 'design_patterns', label: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.MARIA]: [
        { type: 'ui_design', label: '–°–æ–∑–¥–∞—Ç—å UI –¥–∏–∑–∞–π–Ω', data: { projectId: context?.projectId } },
        { type: 'ux_research', label: 'UX –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.ALEXEY]: [
        { type: 'code_review', label: 'Code review', data: { projectId: context?.projectId } },
        { type: 'quality_check', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞', data: { projectId: context?.projectId } }
      ],
      [AISpecialistType.IRINA]: [
        { type: 'team_analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã', data: { workspaceId: context?.workspaceId } },
        { type: 'burnout_prevention', label: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è', data: { workspaceId: context?.workspaceId } }
      ],
      [AISpecialistType.SERGEY]: [
        { type: 'write_article', label: '–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é', data: { projectId: context?.projectId } },
        { type: 'create_guide', label: '–°–æ–∑–¥–∞—Ç—å –≥–∞–π–¥', data: { projectId: context?.projectId } }
      ]
    };

    return actions[specialist] || [];
  }

  /**
   * Get specialist availability status
   */
  isSpecialistAvailable(type: AISpecialistType): boolean {
    return SPECIALISTS[type]?.available || false;
  }

  /**
   * Update specialist mood/status
   */
  updateSpecialistMood(type: AISpecialistType, mood: AISpecialistInfo['mood']): void {
    if (SPECIALISTS[type]) {
      SPECIALISTS[type].mood = mood;
    }
  }
}

// Export singleton instance
export const aiTeamManager = AITeamManager.getInstance();
