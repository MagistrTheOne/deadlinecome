import { GigaChatService } from './gigachat-service';

interface EmotionalState {
  aiId: string;
  mood: 'happy' | 'focused' | 'stressed' | 'tired' | 'excited' | 'frustrated';
  energy: number; // 0-100
  stress: number; // 0-100
  satisfaction: number; // 0-100
  confidence: number; // 0-100
  timestamp: Date;
  context: {
    currentTask?: string;
    workload: number;
    recentInteractions: string[];
  };
}

interface TeamEmotionalHealth {
  overallMood: string;
  stressLevel: number;
  energyLevel: number;
  satisfaction: number;
  recommendations: string[];
  alerts: string[];
}

class EmotionalIntelligence {
  private emotionalStates: EmotionalState[] = [];
  private gigachat: GigaChatService;

  constructor() {
    this.gigachat = new GigaChatService();
  }

  async analyzeEmotionalState(
    aiId: string,
    context: any
  ): Promise<EmotionalState> {
    try {
      const analysis = await this.gigachat.analyzeEmotions({
        aiId,
        context,
        recentStates: this.getRecentStates(aiId, 5)
      });

      const emotionalState: EmotionalState = {
        aiId,
        mood: analysis.mood,
        energy: analysis.energy,
        stress: analysis.stress,
        satisfaction: analysis.satisfaction,
        confidence: analysis.confidence,
        timestamp: new Date(),
        context: {
          currentTask: context.currentTask,
          workload: context.workload || 0,
          recentInteractions: context.recentInteractions || []
        }
      };

      this.emotionalStates.push(emotionalState);
      return emotionalState;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      // Fallback —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      return {
        aiId,
        mood: 'focused',
        energy: 70,
        stress: 30,
        satisfaction: 80,
        confidence: 85,
        timestamp: new Date(),
        context: { workload: 0, recentInteractions: [] }
      };
    }
  }

  async getTeamEmotionalHealth(): Promise<TeamEmotionalHealth> {
    const recentStates = this.emotionalStates
      .filter(state => 
        state.timestamp > new Date(Date.now() - 24 * 60 * 60 * 1000)
      );

    if (recentStates.length === 0) {
      return {
        overallMood: 'neutral',
        stressLevel: 30,
        energyLevel: 70,
        satisfaction: 80,
        recommendations: ['–°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ'],
        alerts: []
      };
    }

    const avgStress = recentStates.reduce((sum, s) => sum + s.stress, 0) / recentStates.length;
    const avgEnergy = recentStates.reduce((sum, s) => sum + s.energy, 0) / recentStates.length;
    const avgSatisfaction = recentStates.reduce((sum, s) => sum + s.satisfaction, 0) / recentStates.length;

    const recommendations: string[] = [];
    const alerts: string[] = [];

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–µ—Å—Å–∞
    if (avgStress > 70) {
      alerts.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∫–æ–º–∞–Ω–¥–µ');
      recommendations.push('–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏');
    } else if (avgStress > 50) {
      recommendations.push('–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞');
    }

    // –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–∏
    if (avgEnergy < 40) {
      alerts.push('–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
      recommendations.push('–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    // –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if (avgSatisfaction < 60) {
      alerts.push('–ù–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π');
      recommendations.push('–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É –∏ —É–ª—É—á—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
    }

    return {
      overallMood: this.determineOverallMood(avgStress, avgEnergy, avgSatisfaction),
      stressLevel: Math.round(avgStress),
      energyLevel: Math.round(avgEnergy),
      satisfaction: Math.round(avgSatisfaction),
      recommendations,
      alerts
    };
  }

  private determineOverallMood(stress: number, energy: number, satisfaction: number): string {
    if (stress > 70) return 'stressed';
    if (energy > 80 && satisfaction > 80) return 'excited';
    if (energy > 60 && satisfaction > 60) return 'happy';
    if (energy < 40) return 'tired';
    return 'focused';
  }

  async provideEmotionalSupport(aiId: string, issue: string): Promise<string> {
    try {
      const support = await this.gigachat.provideEmotionalSupport({
        aiId,
        issue,
        emotionalHistory: this.getRecentStates(aiId, 10)
      });

      return support.message;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
      return '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç.';
    }
  }

  async suggestTeamActivities(): Promise<string[]> {
    const health = await this.getTeamEmotionalHealth();
    
    const activities: string[] = [];
    
    if (health.stressLevel > 60) {
      activities.push('üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã');
      activities.push('üéÆ –ò–≥—Ä–æ–≤–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞');
    }
    
    if (health.energyLevel < 50) {
      activities.push('‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—Ä—è–¥–∫–∞');
      activities.push('üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞');
    }
    
    if (health.satisfaction < 70) {
      activities.push('üéâ –ö–æ–º–∞–Ω–¥–Ω–æ–µ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      activities.push('üí¨ –û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö');
    }

    return activities;
  }

  private getRecentStates(aiId: string, count: number): EmotionalState[] {
    return this.emotionalStates
      .filter(state => state.aiId === aiId)
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
      .slice(0, count);
  }

  getEmotionalTrends(aiId: string, days: number = 7) {
    const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
    const recentStates = this.emotionalStates
      .filter(state => 
        state.aiId === aiId && 
        state.timestamp > cutoffDate
      )
      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

    return {
      moodHistory: recentStates.map(s => ({ date: s.timestamp, mood: s.mood })),
      energyTrend: recentStates.map(s => ({ date: s.timestamp, energy: s.energy })),
      stressTrend: recentStates.map(s => ({ date: s.timestamp, stress: s.stress })),
      satisfactionTrend: recentStates.map(s => ({ date: s.timestamp, satisfaction: s.satisfaction }))
    };
  }
}

export const EmotionalIntelligenceInstance = new EmotionalIntelligence();
