import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { db } from "@/lib/db";
import { aiTeamMember, aiDocumentation } from "@/lib/db/schema";
import { eq } from "drizzle-orm";
import { getWebSocketManager } from "@/lib/websocket-server";

export async function POST(request: NextRequest) {
  try {
    const session = await auth.api.getSession({
      headers: request.headers,
    });

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const {
      projectId,
      docType,
      codeContent,
      apiEndpoints,
      requirements,
    } = await request.json();

    if (!projectId || !docType || !codeContent) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // –ù–∞—Ö–æ–¥–∏–º AI Documentation (–¢–∞—Ç—å—è–Ω–∞)
    const aiDoc = await db
      .select()
      .from(aiTeamMember)
      .where(eq(aiTeamMember.role, "AI_DOCUMENTATION"))
      .limit(1);

    if (!aiDoc.length) {
      return NextResponse.json({ error: "AI Documentation Expert not found" }, { status: 404 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI
    const documentation = await generateDocumentation(docType, codeContent, apiEndpoints, requirements);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const docId = `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const newDoc = await db.insert(aiDocumentation).values({
      id: docId,
      projectId,
      docType: docType as any,
      title: documentation.title,
      content: documentation.content,
      generatedBy: aiDoc[0].id,
      autoGenerated: true,
    }).returning();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    const wsManager = getWebSocketManager();
    if (wsManager) {
      wsManager.notifyDocumentationGenerated(projectId, newDoc[0]);
    }

    return NextResponse.json({
      success: true,
      documentation: newDoc[0],
    });
  } catch (error) {
    console.error("Error generating documentation:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await auth.api.getSession({
      headers: request.headers,
    });

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const projectId = searchParams.get("projectId");
    const docType = searchParams.get("docType");

    let docs = await db.select().from(aiDocumentation);

    if (projectId) {
      docs = docs.filter(doc => doc.projectId === projectId);
    }

    if (docType) {
      docs = docs.filter(doc => doc.docType === docType);
    }

    return NextResponse.json({
      success: true,
      documentation: docs,
    });
  } catch (error) {
    console.error("Error fetching documentation:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// AI —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
async function generateDocumentation(docType: string, codeContent: string, apiEndpoints: any[], requirements: any[]) {
  const docTemplates = {
    API_DOCS: {
      title: "API Documentation",
      content: generateAPIDocumentation(apiEndpoints),
    },
    CODE_COMMENTS: {
      title: "Code Comments",
      content: generateCodeComments(codeContent),
    },
    USER_GUIDE: {
      title: "User Guide",
      content: generateUserGuide(requirements),
    },
    TECHNICAL_SPEC: {
      title: "Technical Specification",
      content: generateTechnicalSpec(codeContent, requirements),
    },
    README: {
      title: "README",
      content: generateREADME(codeContent, requirements),
    },
  };

  return docTemplates[docType as keyof typeof docTemplates] || {
    title: "Documentation",
    content: "Generated documentation content",
  };
}

function generateAPIDocumentation(endpoints: any[]) {
  return `# API Documentation

## Overview
This document describes the REST API endpoints for the application.

## Authentication
All API requests require authentication via JWT token in the Authorization header:
\`\`\`
Authorization: Bearer <your-jwt-token>
\`\`\`

## Endpoints

### Users
- **GET /api/users** - Get all users
- **POST /api/users** - Create new user
- **GET /api/users/:id** - Get user by ID
- **PUT /api/users/:id** - Update user
- **DELETE /api/users/:id** - Delete user

### Tasks
- **GET /api/tasks** - Get all tasks
- **POST /api/tasks** - Create new task
- **GET /api/tasks/:id** - Get task by ID
- **PUT /api/tasks/:id** - Update task
- **DELETE /api/tasks/:id** - Delete task

## Response Format
All responses follow this format:
\`\`\`json
{
  "success": true,
  "data": {},
  "message": "Success message"
}
\`\`\`

## Error Handling
Errors are returned with appropriate HTTP status codes and error messages:
\`\`\`json
{
  "success": false,
  "error": "Error message",
  "code": "ERROR_CODE"
}
\`\`\``;
}

function generateCodeComments(codeContent: string) {
  return `# Code Comments

## Main Application
\`\`\`typescript
/**
 * Main application entry point
 * Initializes the application and sets up middleware
 */
export default function App() {
  // Application initialization logic
  return (
    <div className="app">
      {/* Main application content */}
    </div>
  );
}
\`\`\`

## API Routes
\`\`\`typescript
/**
 * API route handler for user operations
 * @param req - Request object
 * @param res - Response object
 */
export async function handler(req: Request, res: Response) {
  try {
    // Handle the request
    const result = await processRequest(req);
    res.json({ success: true, data: result });
  } catch (error) {
    // Handle errors
    res.status(500).json({ success: false, error: error.message });
  }
}
\`\`\`

## Database Operations
\`\`\`typescript
/**
 * Database connection and query utilities
 * Handles all database operations
 */
class DatabaseService {
  /**
   * Execute a database query
   * @param query - SQL query string
   * @param params - Query parameters
   * @returns Query result
   */
  async executeQuery(query: string, params: any[]) {
    // Database query execution logic
  }
}
\`\`\``;
}

function generateUserGuide(requirements: any[]) {
  return `# User Guide

## Getting Started

### Installation
1. Clone the repository
2. Install dependencies: \`npm install\`
3. Set up environment variables
4. Run the application: \`npm run dev\`

### First Steps
1. Create an account
2. Set up your profile
3. Create your first project
4. Invite team members

## Features

### Project Management
- Create and manage projects
- Organize tasks and issues
- Track progress and deadlines
- Collaborate with team members

### Task Management
- Create tasks with descriptions
- Assign tasks to team members
- Set priorities and deadlines
- Track task completion

### Team Collaboration
- Real-time updates
- Comment on tasks and issues
- Share files and documents
- Schedule meetings

## Best Practices
- Keep tasks small and focused
- Use clear descriptions
- Set realistic deadlines
- Communicate regularly with team

## Troubleshooting
- Check your internet connection
- Clear browser cache
- Contact support if issues persist`;
}

function generateTechnicalSpec(codeContent: string, requirements: any[]) {
  return `# Technical Specification

## Architecture Overview
The application follows a modern web architecture with the following components:

### Frontend
- **Framework**: Next.js 15.5+
- **Styling**: Tailwind CSS 4
- **UI Components**: shadcn/ui
- **State Management**: React Context + Hooks

### Backend
- **Database**: PostgreSQL with Neon
- **ORM**: Drizzle ORM
- **Authentication**: Better Auth
- **API**: Next.js API Routes

### Infrastructure
- **Hosting**: Vercel
- **Database**: Neon PostgreSQL
- **CDN**: Vercel Edge Network

## Database Schema
\`\`\`sql
-- Users table
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Projects table
CREATE TABLE projects (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);
\`\`\`

## API Endpoints
- **Authentication**: /api/auth/*
- **Users**: /api/users/*
- **Projects**: /api/projects/*
- **Tasks**: /api/tasks/*

## Security Considerations
- JWT token authentication
- Input validation and sanitization
- SQL injection prevention
- XSS protection
- CSRF protection

## Performance Requirements
- Page load time: < 2 seconds
- API response time: < 500ms
- Database query time: < 100ms
- Concurrent users: 1000+

## Deployment
- Automated deployment via Vercel
- Environment-specific configurations
- Database migrations
- Health checks and monitoring`;
}

function generateREADME(codeContent: string, requirements: any[]) {
  return `# DeadLine - AI-Powered Project Management

A modern project management platform with AI-powered features for development teams.

## üöÄ Features

### AI-Powered Team
- **Vasily (AI CTO)** - Technical strategy and architecture
- **Anna (AI HR)** - Candidate analysis and recruitment
- **Dmitry (AI PM)** - Project planning and management
- **Elena (AI QA)** - Quality assurance and testing
- **Sergey (AI DevOps)** - Infrastructure and automation
- **Maria (AI Designer)** - UI/UX design and research
- **Alexey (AI Analyst)** - Data analysis and insights

### Core Features
- Real-time project management
- AI-powered code review
- Automated quality gates
- Security scanning
- Performance analysis
- Sprint planning
- Documentation generation
- Team analytics

## üõ†Ô∏è Tech Stack

- **Frontend**: Next.js 15.5+, Tailwind CSS 4, shadcn/ui
- **Backend**: Neon PostgreSQL, Drizzle ORM
- **Authentication**: Better Auth
- **AI Integration**: OpenAI, GigaChat
- **Real-time**: WebSocket

## üì¶ Installation

\`\`\`bash
# Clone the repository
git clone https://github.com/your-org/deadline.git

# Install dependencies
npm install

# Set up environment variables
cp .env.example .env.local

# Run database migrations
npm run db:migrate

# Start development server
npm run dev
\`\`\`

## üîß Environment Variables

\`\`\`env
DATABASE_URL=your_database_url
NEXTAUTH_SECRET=your_secret
OPENAI_API_KEY=your_openai_key
GIGACHAT_API_KEY=your_gigachat_key
\`\`\`

## üöÄ Deployment

The application is deployed on Vercel with automatic deployments from the main branch.

## üìö Documentation

- [API Documentation](./docs/api.md)
- [User Guide](./docs/user-guide.md)
- [Technical Specification](./docs/technical-spec.md)

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License.

## üÜò Support

For support, email support@deadline.com or join our Discord server.`;
}
